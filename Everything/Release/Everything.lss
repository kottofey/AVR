
Everything.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  000013e6  0000147a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000053  0080009a  0080009a  000014b4  2**0
                  ALLOC
  3 .stab         00004398  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018f5  00000000  00000000  0000584c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007141  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  00007158  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003b6  00000000  00000000  000071f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000064  00000000  00000000  000075ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001dd  00000000  00000000  00007612  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__ctors_end>
       4:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
       8:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
       c:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      10:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__vector_4>
      14:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      18:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      1c:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      20:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      24:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      28:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      2c:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_11>
      30:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      34:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      38:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      3c:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      40:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      44:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      48:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      4c:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      50:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
      54:	b7 05       	cpc	r27, r7
      56:	b9 05       	cpc	r27, r9
      58:	bb 05       	cpc	r27, r11
      5a:	be 05       	cpc	r27, r14
      5c:	c4 05       	cpc	r28, r4
      5e:	c6 05       	cpc	r28, r6
      60:	4f 06       	cpc	r4, r31
      62:	c9 05       	cpc	r28, r9
      64:	cb 05       	cpc	r28, r11
      66:	cd 05       	cpc	r28, r13
      68:	cf 05       	cpc	r28, r15

0000006a <__trampolines_end>:
      6a:	00 5e       	subi	r16, 0xE0	; 224
      6c:	bc e2       	ldi	r27, 0x2C	; 44
      6e:	61 3f       	cpi	r22, 0xF1	; 241
      70:	dd 83       	std	Y+5, r29	; 0x05
      72:	c2 9c       	mul	r12, r2
      74:	7e 20       	and	r7, r14
      76:	a3 fd       	sbrc	r26, 3
      78:	1f 41       	sbci	r17, 0x1F	; 31
      7a:	9d c3       	rjmp	.+1850   	; 0x7b6 <LCD_WriteByte+0x3e>
      7c:	21 7f       	andi	r18, 0xF1	; 241
      7e:	fc a2       	std	Y+36, r15	; 0x24
      80:	40 1e       	adc	r4, r16
      82:	5f 01       	movw	r10, r30
      84:	e3 bd       	out	0x23, r30	; 35
      86:	3e 60       	ori	r19, 0x0E	; 14
      88:	82 dc       	rcall	.-1788   	; 0xfffff98e <__eeprom_end+0xff7ef98e>
      8a:	23 7d       	andi	r18, 0xD3	; 211
      8c:	9f c1       	rjmp	.+830    	; 0x3cc <__do_copy_data+0x6>
      8e:	42 1c       	adc	r4, r2
      90:	fe a0       	ldd	r15, Y+38	; 0x26
      92:	e1 bf       	out	0x31, r30	; 49
      94:	5d 03       	fmul	r21, r21
      96:	80 de       	rcall	.-768    	; 0xfffffd98 <__eeprom_end+0xff7efd98>
      98:	3c 62       	ori	r19, 0x2C	; 44
      9a:	be e0       	ldi	r27, 0x0E	; 14
      9c:	02 5c       	subi	r16, 0xC2	; 194
      9e:	df 81       	ldd	r29, Y+7	; 0x07
      a0:	63 3d       	cpi	r22, 0xD3	; 211
      a2:	7c 22       	and	r7, r28
      a4:	c0 9e       	mul	r12, r16
      a6:	1d 43       	sbci	r17, 0x3D	; 61
      a8:	a1 ff       	sbrs	r26, 1
      aa:	46 18       	sub	r4, r6
      ac:	fa a4       	ldd	r15, Y+42	; 0x2a
      ae:	27 79       	andi	r18, 0x97	; 151
      b0:	9b c5       	rjmp	.+2870   	; 0xbe8 <LCD_ProcessFSM+0x116>
      b2:	84 da       	rcall	.-2808   	; 0xfffff5bc <__eeprom_end+0xff7ef5bc>
      b4:	38 66       	ori	r19, 0x68	; 104
      b6:	e5 bb       	out	0x15, r30	; 21
      b8:	59 07       	cpc	r21, r25
      ba:	db 85       	ldd	r29, Y+11	; 0x0b
      bc:	67 39       	cpi	r22, 0x97	; 151
      be:	ba e4       	ldi	r27, 0x4A	; 74
      c0:	06 58       	subi	r16, 0x86	; 134
      c2:	19 47       	sbci	r17, 0x79	; 121
      c4:	a5 fb       	bst	r26, 5
      c6:	78 26       	eor	r7, r24
      c8:	c4 9a       	sbi	0x18, 4	; 24
      ca:	65 3b       	cpi	r22, 0xB5	; 181
      cc:	d9 87       	std	Y+9, r29	; 0x09
      ce:	04 5a       	subi	r16, 0xA4	; 164
      d0:	b8 e6       	ldi	r27, 0x68	; 104
      d2:	a7 f9       	bld	r26, 7
      d4:	1b 45       	sbci	r17, 0x5B	; 91
      d6:	c6 98       	cbi	0x18, 6	; 24
      d8:	7a 24       	eor	r7, r10
      da:	f8 a6       	std	Y+40, r15	; 0x28
      dc:	44 1a       	sub	r4, r20
      de:	99 c7       	rjmp	.+3890   	; 0x1012 <__vector_4+0x42>
      e0:	25 7b       	andi	r18, 0xB5	; 181
      e2:	3a 64       	ori	r19, 0x4A	; 74
      e4:	86 d8       	rcall	.-3828   	; 0xfffff1f2 <__eeprom_end+0xff7ef1f2>
      e6:	5b 05       	cpc	r21, r11
      e8:	e7 b9       	out	0x07, r30	; 7
      ea:	8c d2       	rcall	.+1304   	; 0x604 <DS_GetAsciiTemp+0x74>
      ec:	30 6e       	ori	r19, 0xE0	; 224
      ee:	ed b3       	in	r30, 0x1d	; 29
      f0:	51 0f       	add	r21, r17
      f2:	4e 10       	cpse	r4, r14
      f4:	f2 ac       	ldd	r15, Z+58	; 0x3a
      f6:	2f 71       	andi	r18, 0x1F	; 31
      f8:	93 cd       	rjmp	.-1242   	; 0xfffffc20 <__eeprom_end+0xff7efc20>
      fa:	11 4f       	sbci	r17, 0xF1	; 241
      fc:	ad f3       	brhs	.-22     	; 0xe8 <__trampolines_end+0x7e>
      fe:	70 2e       	mov	r7, r16
     100:	cc 92       	st	X, r12
     102:	d3 8d       	ldd	r29, Z+27	; 0x1b
     104:	6f 31       	cpi	r22, 0x1F	; 31
     106:	b2 ec       	ldi	r27, 0xC2	; 194
     108:	0e 50       	subi	r16, 0x0E	; 14
     10a:	af f1       	brie	.+106    	; 0x176 <__c.1997+0xc>
     10c:	13 4d       	sbci	r17, 0xD3	; 211
     10e:	ce 90       	ld	r12, -X
     110:	72 2c       	mov	r7, r2
     112:	6d 33       	cpi	r22, 0x3D	; 61
     114:	d1 8f       	std	Z+25, r29	; 0x19
     116:	0c 52       	subi	r16, 0x2C	; 44
     118:	b0 ee       	ldi	r27, 0xE0	; 224
     11a:	32 6c       	ori	r19, 0xC2	; 194
     11c:	8e d0       	rcall	.+284    	; 0x23a <x2y3+0xa>
     11e:	53 0d       	add	r21, r3
     120:	ef b1       	in	r30, 0x0f	; 15
     122:	f0 ae       	std	Z+56, r15	; 0x38
     124:	4c 12       	cpse	r4, r28
     126:	91 cf       	rjmp	.-222    	; 0x4a <__SREG__+0xb>
     128:	2d 73       	andi	r18, 0x3D	; 61
     12a:	ca 94       	dec	r12
     12c:	76 28       	or	r7, r6
     12e:	ab f5       	brvc	.+106    	; 0x19a <__c.1881+0x2>
     130:	17 49       	sbci	r17, 0x97	; 151
     132:	08 56       	subi	r16, 0x68	; 104
     134:	b4 ea       	ldi	r27, 0xA4	; 164
     136:	69 37       	cpi	r22, 0x79	; 121
     138:	d5 8b       	std	Z+21, r29	; 0x15
     13a:	57 09       	sbc	r21, r7
     13c:	eb b5       	in	r30, 0x2b	; 43
     13e:	36 68       	ori	r19, 0x86	; 134
     140:	8a d4       	rcall	.+2324   	; 0xa56 <LCD_GotoXY+0xc>
     142:	95 cb       	rjmp	.-2262   	; 0xfffff86e <__eeprom_end+0xff7ef86e>
     144:	29 77       	andi	r18, 0x79	; 121
     146:	f4 aa       	std	Z+52, r15	; 0x34
     148:	48 16       	cp	r4, r24
     14a:	e9 b7       	in	r30, 0x39	; 57
     14c:	55 0b       	sbc	r21, r21
     14e:	88 d6       	rcall	.+3344   	; 0xe60 <ProcessTimers+0x86>
     150:	34 6a       	ori	r19, 0xA4	; 164
     152:	2b 75       	andi	r18, 0x5B	; 91
     154:	97 c9       	rjmp	.-3282   	; 0xfffff484 <__eeprom_end+0xff7ef484>
     156:	4a 14       	cp	r4, r10
     158:	f6 a8       	ldd	r15, Z+54	; 0x36
     15a:	74 2a       	or	r7, r20
     15c:	c8 96       	adiw	r24, 0x38	; 56
     15e:	15 4b       	sbci	r17, 0xB5	; 181
     160:	a9 f7       	brne	.-22     	; 0x14c <__trampolines_end+0xe2>
     162:	b6 e8       	ldi	r27, 0x86	; 134
     164:	0a 54       	subi	r16, 0x4A	; 74
     166:	d7 89       	ldd	r29, Z+23	; 0x17
     168:	6b 35       	cpi	r22, 0x5B	; 91

0000016a <__c.1997>:
     16a:	54 68 65 72 65 20 77 61 73 20 65 72 72 6f 72 21     There was error!
	...

0000017b <__c.1973>:
     17b:	4d 45 4e 55 3a 00                                   MENU:.

00000181 <__c.1970>:
     181:	4d 45 4e 55 3a 00                                   MENU:.

00000187 <__c.1950>:
     187:	43 00                                               C.

00000189 <__c.1948>:
     189:	d0 a2 d0 b5 d0 bc d0 bf 3d 20 20 20 20 20 00        ........=     .

00000198 <__c.1881>:
     198:	34 2d d0 b1 d0 b8 d1 82 d0 bd d1 8b d0 b9 20 d1     4-............ .
     1a8:	80 d0 b5 d0 b6 d0 b8 d0 bc 00                       ..........

000001b2 <x5>:
     1b2:	8d 03 c3 01 b2 01 b2 01 b4 08 00 00 45 78 69 74     ............Exit
	...

000001c3 <x4>:
     1c3:	b2 01 e0 01 c3 01 c3 01 2d 03 00 00 52 45 41 44     ........-...READ
     1d3:	5f 52 4f 4d 20 74 6f 20 55 41 52 54 00              _ROM to UART.

000001e0 <x3>:
     1e0:	c3 01 80 02 e0 01 e0 01 c0 09 00 00 44 53 20 53     ............DS S
     1f0:	45 41 52 43 48 52 4f 4d 00                          EARCHROM.

000001f9 <x2y5>:
     1f9:	68 02 16 02 80 02 f9 01 db 04 00 00 3e 20 43 75     h...........> Cu
     209:	72 73 6f 72 20 74 6f 20 55 41 52 54 00              rsor to UART.

00000216 <x2y4>:
     216:	f9 01 30 02 80 02 16 02 c9 08 00 00 3e 20 4c 69     ..0.........> Li
     226:	6e 65 2c 20 62 6c 69 6e 6b 00                       ne, blink.

00000230 <x2y3>:
     230:	16 02 4d 02 80 02 30 02 c3 08 00 00 3e 20 4c 69     ..M...0.....> Li
     240:	6e 65 2c 20 6e 6f 20 62 6c 69 6e 6b 00              ne, no blink.

0000024d <x2y2>:
     24d:	30 02 68 02 80 02 4d 02 bd 08 00 00 3e 20 42 6c     0.h...M.....> Bl
     25d:	6f 63 6b 2c 20 62 6c 69 6e 6b 00                    ock, blink.

00000268 <x2y1>:
     268:	4d 02 f9 01 80 02 68 02 b7 08 00 00 3e 20 4e 6f     M.....h.....> No
     278:	20 63 75 72 73 6f 72 00                              cursor.

00000280 <x2>:
     280:	e0 01 8d 03 80 02 68 02 00 00 00 00 4c 43 44 20     ......h.....LCD 
     290:	53 65 74 74 69 6e 67 73 20 20 20 3e 00              Settings   >.

0000029d <x1y4>:
     29d:	70 03 ba 02 8d 03 9d 02 13 03 00 00 53 74 6f 70     p...........Stop
     2ad:	20 20 20 20 20 20 20 20 20 20 20 3e 00                         >.

000002ba <x1y3>:
     2ba:	9d 02 2a 03 8d 03 ba 02 10 03 00 00 53 74 61 72     ..*.........Star
     2ca:	74 20 20 20 20 20 20 20 20 20 20 3e 00              t          >.

000002d7 <x1y2z4>:
     2d7:	16 03 ec 02 2a 03 d7 02 86 08 00 00 3e 20 31 32     ....*.......> 12
     2e7:	20 62 69 74 00                                       bit.

000002ec <x1y2z3>:
     2ec:	d7 02 01 03 2a 03 ec 02 6a 08 00 00 3e 20 31 31     ....*...j...> 11
     2fc:	20 62 69 74 00                                       bit.

00000301 <x1y2z2>:
     301:	ec 02 16 03 2a 03 01 03 4e 08 00 00 3e 20 31 30     ....*...N...> 10
     311:	20 62 69 74 00                                       bit.

00000316 <x1y2z1>:
     316:	01 03 d7 02 2a 03 16 03 32 08 00 00 3e 20 39 20     ....*...2...> 9 
     326:	62 69 74 00                                         bit.

0000032a <x1y2>:
     32a:	ba 02 70 03 8d 03 16 03 00 00 00 00 43 6f 6e 76     ..p.........Conv
     33a:	65 72 74 20 62 69 74 73 20 20 20 3e 00              ert bits   >.

00000347 <x1y1z2>:
     347:	5c 03 5c 03 70 03 47 03 ab 08 00 00 3e 20 31 30     \.\.p.G.....> 10
     357:	20 73 65 63 00                                       sec.

0000035c <x1y1z1>:
     35c:	47 03 47 03 70 03 5c 03 a2 08 00 00 3e 20 31 20     G.G.p.\.....> 1 
     36c:	73 65 63 00                                         sec.

00000370 <x1y1>:
     370:	2a 03 9d 02 8d 03 5c 03 00 00 00 00 4d 65 61 73     *.....\.....Meas
     380:	75 72 65 20 50 65 72 69 6f 64 20 3e 00              ure Period >.

0000038d <x1>:
     38d:	80 02 b2 01 8d 03 70 03 00 00 00 00 44 53 20 53     ......p.....DS S
     39d:	65 74 74 69 6e 67 73 20 20 20 20 3e 00              ettings    >.

000003aa <Null_Menu>:
	...
     3b6:	4e 2f 41 00                                         N/A.

000003ba <__ctors_end>:
     3ba:	11 24       	eor	r1, r1
     3bc:	1f be       	out	0x3f, r1	; 63
     3be:	cf e5       	ldi	r28, 0x5F	; 95
     3c0:	d4 e0       	ldi	r29, 0x04	; 4
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	cd bf       	out	0x3d, r28	; 61

000003c6 <__do_copy_data>:
     3c6:	10 e0       	ldi	r17, 0x00	; 0
     3c8:	a0 e6       	ldi	r26, 0x60	; 96
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	e6 ee       	ldi	r30, 0xE6	; 230
     3ce:	f3 e1       	ldi	r31, 0x13	; 19
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <__do_copy_data+0x10>
     3d2:	05 90       	lpm	r0, Z+
     3d4:	0d 92       	st	X+, r0
     3d6:	aa 39       	cpi	r26, 0x9A	; 154
     3d8:	b1 07       	cpc	r27, r17
     3da:	d9 f7       	brne	.-10     	; 0x3d2 <__do_copy_data+0xc>

000003dc <__do_clear_bss>:
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	aa e9       	ldi	r26, 0x9A	; 154
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <.do_clear_bss_start>

000003e4 <.do_clear_bss_loop>:
     3e4:	1d 92       	st	X+, r1

000003e6 <.do_clear_bss_start>:
     3e6:	ad 3e       	cpi	r26, 0xED	; 237
     3e8:	b2 07       	cpc	r27, r18
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <.do_clear_bss_loop>
     3ec:	0e 94 0c 08 	call	0x1018	; 0x1018 <main>
     3f0:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <_exit>

000003f4 <__bad_interrupt>:
     3f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003f8 <DS_Reset>:
233,183, 85, 11,136,214, 52,106, 43,117,151,201, 74, 20,246,168,
116, 42,200,150, 21, 75,169,247,182,232, 10, 84,215,137,107, 53};

int DS_Reset() {
//	asm("cli");
	pin_write();
     3f8:	8a 9a       	sbi	0x11, 2	; 17
	pin_low();
     3fa:	92 98       	cbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3fc:	8f eb       	ldi	r24, 0xBF	; 191
     3fe:	93 e0       	ldi	r25, 0x03	; 3
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <DS_Reset+0x8>
     404:	00 c0       	rjmp	.+0      	; 0x406 <DS_Reset+0xe>
     406:	00 00       	nop
	_delay_us(480);
	pin_high();
     408:	92 9a       	sbi	0x12, 2	; 18
     40a:	90 ea       	ldi	r25, 0xA0	; 160
     40c:	9a 95       	dec	r25
     40e:	f1 f7       	brne	.-4      	; 0x40c <DS_Reset+0x14>
	_delay_us(60); //ждем пока оно сообразит
	pin_read();
     410:	8a 98       	cbi	0x11, 2	; 17
	char i = (DS_PIN & (1 << DS_PIN_NUMBER));	// проверяем ножку на сигнал присутствия датчика

	   if (i == 0) {	// датчик обнаружен, ножка прижата к нулю
     412:	82 99       	sbic	0x10, 2	; 16
     414:	09 c0       	rjmp	.+18     	; 0x428 <DS_Reset+0x30>
     416:	8f eb       	ldi	r24, 0xBF	; 191
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <DS_Reset+0x22>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <DS_Reset+0x28>
     420:	00 00       	nop
//			UART_TxChar('Y');
		    _delay_us(480);
//		    asm("sei");
		    return 1;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	08 95       	ret
     428:	8f eb       	ldi	r24, 0xBF	; 191
     42a:	93 e0       	ldi	r25, 0x03	; 3
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <DS_Reset+0x34>
     430:	00 c0       	rjmp	.+0      	; 0x432 <DS_Reset+0x3a>
     432:	00 00       	nop
	   else {	// датчик не обнаружен, ножка осталась подтянута к питанию

//			UART_TxChar('N');
		   _delay_us(480);
//		   asm("sei");
		   return 0;
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
		}
}
     438:	08 95       	ret

0000043a <DS_WriteBit>:

void DS_WriteBit(unsigned int bit){
	if (bit){
		pin_write();
     43a:	8a 9a       	sbi	0x11, 2	; 17
		pin_low();
     43c:	92 98       	cbi	0x12, 2	; 18
		   return 0;
		}
}

void DS_WriteBit(unsigned int bit){
	if (bit){
     43e:	89 2b       	or	r24, r25
     440:	59 f0       	breq	.+22     	; 0x458 <DS_WriteBit+0x1e>
     442:	88 e2       	ldi	r24, 0x28	; 40
     444:	8a 95       	dec	r24
     446:	f1 f7       	brne	.-4      	; 0x444 <DS_WriteBit+0xa>
		pin_write();
		pin_low();
		_delay_us(15);
		pin_high();
     448:	92 9a       	sbi	0x12, 2	; 18
     44a:	98 e7       	ldi	r25, 0x78	; 120
     44c:	9a 95       	dec	r25
     44e:	f1 f7       	brne	.-4      	; 0x44c <DS_WriteBit+0x12>
     450:	88 e0       	ldi	r24, 0x08	; 8
     452:	8a 95       	dec	r24
     454:	f1 f7       	brne	.-4      	; 0x452 <DS_WriteBit+0x18>
     456:	08 95       	ret
     458:	87 ec       	ldi	r24, 0xC7	; 199
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <DS_WriteBit+0x22>
     460:	00 c0       	rjmp	.+0      	; 0x462 <__stack+0x3>
     462:	00 00       	nop
	}
	else	{
		pin_write();
		pin_low();
		_delay_us(100);
		pin_high();
     464:	92 9a       	sbi	0x12, 2	; 18
     466:	98 e0       	ldi	r25, 0x08	; 8
     468:	9a 95       	dec	r25
     46a:	f1 f7       	brne	.-4      	; 0x468 <__stack+0x9>
     46c:	08 95       	ret

0000046e <DS_WriteByte>:
		_delay_us(3);	// Восстановление между таймслотами
	}
}

void DS_WriteByte(unsigned int byte){
     46e:	28 e0       	ldi	r18, 0x08	; 8
     470:	30 e0       	ldi	r19, 0x00	; 0
//	asm("cli");
	for (int i = 0; i < 8; i++){
		if (byte & 0b00000001){
			pin_write();
     472:	8a 9a       	sbi	0x11, 2	; 17
			pin_low();
     474:	92 98       	cbi	0x12, 2	; 18
}

void DS_WriteByte(unsigned int byte){
//	asm("cli");
	for (int i = 0; i < 8; i++){
		if (byte & 0b00000001){
     476:	80 ff       	sbrs	r24, 0
     478:	08 c0       	rjmp	.+16     	; 0x48a <DS_WriteByte+0x1c>
     47a:	48 e2       	ldi	r20, 0x28	; 40
     47c:	4a 95       	dec	r20
     47e:	f1 f7       	brne	.-4      	; 0x47c <DS_WriteByte+0xe>
			pin_write();
			pin_low();
			_delay_us(15);
			pin_high();
     480:	92 9a       	sbi	0x12, 2	; 18
     482:	e8 e7       	ldi	r30, 0x78	; 120
     484:	ea 95       	dec	r30
     486:	f1 f7       	brne	.-4      	; 0x484 <DS_WriteByte+0x16>
     488:	07 c0       	rjmp	.+14     	; 0x498 <DS_WriteByte+0x2a>
     48a:	e7 ec       	ldi	r30, 0xC7	; 199
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <DS_WriteByte+0x20>
     492:	00 c0       	rjmp	.+0      	; 0x494 <DS_WriteByte+0x26>
     494:	00 00       	nop
		}
		else	{
			pin_write();
			pin_low();
			_delay_us(100);
			pin_high();
     496:	92 9a       	sbi	0x12, 2	; 18
     498:	f8 e0       	ldi	r31, 0x08	; 8
     49a:	fa 95       	dec	r31
     49c:	f1 f7       	brne	.-4      	; 0x49a <DS_WriteByte+0x2c>
			_delay_us(3);	// Восстановление между таймслотами
		}
		byte >>= 1;
     49e:	96 95       	lsr	r25
     4a0:	87 95       	ror	r24
     4a2:	21 50       	subi	r18, 0x01	; 1
     4a4:	31 09       	sbc	r19, r1
	}
}

void DS_WriteByte(unsigned int byte){
//	asm("cli");
	for (int i = 0; i < 8; i++){
     4a6:	21 15       	cp	r18, r1
     4a8:	31 05       	cpc	r19, r1
     4aa:	19 f7       	brne	.-58     	; 0x472 <DS_WriteByte+0x4>
			_delay_us(3);	// Восстановление между таймслотами
		}
		byte >>= 1;
	}
//	asm("sei");
}
     4ac:	08 95       	ret

000004ae <DS_ReadBit>:

char DS_ReadBit(){
//	asm("cli");
	char bit;
	pin_write();
     4ae:	8a 9a       	sbi	0x11, 2	; 17
	pin_low();		// Прижимаем к нулю
     4b0:	92 98       	cbi	0x12, 2	; 18
     4b2:	88 e0       	ldi	r24, 0x08	; 8
     4b4:	8a 95       	dec	r24
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <DS_ReadBit+0x6>
	_delay_us(3);	// на 3 мкс, начало таймслота
	pin_high();		// Отпускаем шину
     4b8:	92 9a       	sbi	0x12, 2	; 18
     4ba:	92 e1       	ldi	r25, 0x12	; 18
     4bc:	9a 95       	dec	r25
     4be:	f1 f7       	brne	.-4      	; 0x4bc <DS_ReadBit+0xe>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <DS_ReadBit+0x14>
	_delay_us(7);	// Ждем до чтения бита (данные действительны в течение 15 мкс после начала таймслота)

	pin_read(); // пин PD6 на чтение
     4c2:	8a 98       	cbi	0x11, 2	; 17
	bit = (DS_PIN & (1 << DS_PIN_NUMBER)) >> DS_PIN_NUMBER;	// Читаем бит. Сдвиг вправо на n бит чтобы получить чистую ноль или единицу
     4c4:	80 b3       	in	r24, 0x10	; 16
     4c6:	90 ea       	ldi	r25, 0xA0	; 160
     4c8:	9a 95       	dec	r25
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <DS_ReadBit+0x1a>
	_delay_us(60);	// Ждем до конца таймслота
//	asm("sei");
	return bit;
}
     4cc:	82 fb       	bst	r24, 2
     4ce:	88 27       	eor	r24, r24
     4d0:	80 f9       	bld	r24, 0
     4d2:	08 95       	ret

000004d4 <DS_ReadByte>:

char DS_ReadByte(){
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	c0 e0       	ldi	r28, 0x00	; 0
     4dc:	d0 e0       	ldi	r29, 0x00	; 0
	char data = 0;
     4de:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++){
		data |= DS_ReadBit() << i;
     4e0:	0e 94 57 02 	call	0x4ae	; 0x4ae <DS_ReadBit>
     4e4:	28 2f       	mov	r18, r24
     4e6:	0c 2e       	mov	r0, r28
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <DS_ReadByte+0x18>
     4ea:	22 0f       	add	r18, r18
     4ec:	0a 94       	dec	r0
     4ee:	ea f7       	brpl	.-6      	; 0x4ea <DS_ReadByte+0x16>
     4f0:	12 2b       	or	r17, r18
     4f2:	21 96       	adiw	r28, 0x01	; 1
	return bit;
}

char DS_ReadByte(){
	char data = 0;
	for (uint8_t i = 0; i < 8; i++){
     4f4:	c8 30       	cpi	r28, 0x08	; 8
     4f6:	d1 05       	cpc	r29, r1
     4f8:	99 f7       	brne	.-26     	; 0x4e0 <DS_ReadByte+0xc>
		data |= DS_ReadBit() << i;
	}
	return data;
}
     4fa:	81 2f       	mov	r24, r17
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	08 95       	ret

00000504 <DS_MeasureTemp>:

void DS_MeasureTemp(){
	DS_Reset();
     504:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DS_Reset>
	DS_WriteByte(SKIP_ROM);
     508:	8c ec       	ldi	r24, 0xCC	; 204
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(CONVERT_T);	// Запуск измерения температуры
     510:	84 e4       	ldi	r24, 0x44	; 68
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0c 94 37 02 	jmp	0x46e	; 0x46e <DS_WriteByte>

00000518 <DS_GetTemp>:
}

uint16_t DS_GetTemp(){
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
	char ls = 0;	// Less Significant byte из датчика
	char ms = 0;	// Most Significant byte из датчика
	uint16_t DSTemp = 0;	// Собственно температура в int

	DS_Reset(); // Посылаем Reset и ждем сигнал Presence от датчика
     51c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DS_Reset>
	DS_WriteByte(SKIP_ROM);	// Один датчик
     520:	8c ec       	ldi	r24, 0xCC	; 204
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(READ_SCRATCHPAD); //передать байты из памяти мастеру (у 18b20 в первых двух содержится температура)
     528:	8e eb       	ldi	r24, 0xBE	; 190
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>

	ls = DS_ReadByte(); //читаем байт LS
     530:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DS_ReadByte>
     534:	d8 2f       	mov	r29, r24
	ms = DS_ReadByte(); //читаем байт MS
     536:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DS_ReadByte>
     53a:	c8 2f       	mov	r28, r24
	DS_Reset();	// Reset ибо кроме первых двух байт температуры нам пока ничего не надо
     53c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DS_Reset>

	DSTemp = ((ms << 8) | ls); //укладываем биты в последовательности MS потом LS
     540:	4d 2f       	mov	r20, r29
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	5c 2b       	or	r21, r28

// Конвертируем в int XXXY, где XXX - целая часть, а Y - десятичная часть
	int16_t IntTemp; // Переменная для конвертации температуры в целочисленное значение
	IntTemp = (DSTemp & 0x0FFF); // обнуляем биты знака (с 15 по 12). В итоге получаем 12 бит
     546:	ea 01       	movw	r28, r20
     548:	df 70       	andi	r29, 0x0F	; 15
//
// Определяем знак. Если знак минус (старший бит равен единице), то инвертируем байт и добавляем единичку.
// Это есть операция нахождения обратного кода. Она используется для представления отрицательных чисел в двоичном коде
// Байт инвертируется, добавляется единица, а старший-знаковый бит откидывается. В итоге будет модуль отрицательного числа.

		if (IntTemp & 2048){	/*Если температура отрицательная*/
     54a:	53 ff       	sbrs	r21, 3
     54c:	14 c0       	rjmp	.+40     	; 0x576 <DS_GetTemp+0x5e>
			SendMessage(MSG_TEMP_NEGATIVE);	// Выставляем флаг, что температура орицательна. Чтобы потом вывести знак минуса на экран.
     54e:	84 e0       	ldi	r24, 0x04	; 4
     550:	0e 94 5f 06 	call	0xcbe	; 0xcbe <SendMessage>
			IntTemp ^= 0xFFF;	// Ксорим 12 бит (инвертируем то бишь)
     554:	9e 01       	movw	r18, r28
     556:	20 95       	com	r18
     558:	8f e0       	ldi	r24, 0x0F	; 15
     55a:	38 27       	eor	r19, r24
			IntTemp++;			// Добавляем единичку. Получили модуль значения температуры.
     55c:	2f 5f       	subi	r18, 0xFF	; 255
     55e:	3f 4f       	sbci	r19, 0xFF	; 255
			IntTemp = (IntTemp >> 1) + (IntTemp >> 3);	// Делим на 16
     560:	c9 01       	movw	r24, r18
     562:	95 95       	asr	r25
     564:	87 95       	ror	r24
     566:	e3 e0       	ldi	r30, 0x03	; 3
     568:	35 95       	asr	r19
     56a:	27 95       	ror	r18
     56c:	ea 95       	dec	r30
     56e:	e1 f7       	brne	.-8      	; 0x568 <DS_GetTemp+0x50>
     570:	82 0f       	add	r24, r18
     572:	93 1f       	adc	r25, r19

			return IntTemp;
     574:	0a c0       	rjmp	.+20     	; 0x58a <DS_GetTemp+0x72>
		}
		else {
			IntTemp = (IntTemp >> 1) + (IntTemp >> 3); // Просто и с радостью делим на 16 ибо температура положительна!
     576:	ce 01       	movw	r24, r28
     578:	95 95       	asr	r25
     57a:	87 95       	ror	r24
     57c:	63 e0       	ldi	r22, 0x03	; 3
     57e:	d5 95       	asr	r29
     580:	c7 95       	ror	r28
     582:	6a 95       	dec	r22
     584:	e1 f7       	brne	.-8      	; 0x57e <DS_GetTemp+0x66>
     586:	8c 0f       	add	r24, r28
     588:	9d 1f       	adc	r25, r29
			return IntTemp;
		}
}
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <DS_GetAsciiTemp>:

void DS_GetAsciiTemp(){
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <DS_GetAsciiTemp+0x10>
     5a0:	1f 92       	push	r1
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
	uint16_t int_temp = DS_GetTemp();
     5a6:	0e 94 8c 02 	call	0x518	; 0x518 <DS_GetTemp>
     5aa:	f8 2e       	mov	r15, r24
//
//	*(AsciiTemp + (i+3) ) = '\n';
//	*(AsciiTemp + (i+2) ) = 'C';
//	*(AsciiTemp + (i+1) ) = 0xB0;

	for(int i = buf_size; i >= 0; i--){
     5ac:	24 e0       	ldi	r18, 0x04	; 4
     5ae:	30 e0       	ldi	r19, 0x00	; 0
		if (GetMessage(MSG_TEMP_NEGATIVE)){
			*(AsciiTemp + i) = '-';
     5b0:	fd e2       	ldi	r31, 0x2D	; 45
     5b2:	ef 2e       	mov	r14, r31
			i--;
		}
		if (i==buf_size-1){ // Вставляем десятичную точку перед десятой долей градуса
			*(AsciiTemp+i)='.';
     5b4:	ae e2       	ldi	r26, 0x2E	; 46
     5b6:	da 2e       	mov	r13, r26
			i--;
		}

		*(AsciiTemp + i) = int_temp%10 | 0x30;
     5b8:	0a e0       	ldi	r16, 0x0A	; 10
     5ba:	10 e0       	ldi	r17, 0x00	; 0
//	*(AsciiTemp + (i+3) ) = '\n';
//	*(AsciiTemp + (i+2) ) = 'C';
//	*(AsciiTemp + (i+1) ) = 0xB0;

	for(int i = buf_size; i >= 0; i--){
		if (GetMessage(MSG_TEMP_NEGATIVE)){
     5bc:	84 e0       	ldi	r24, 0x04	; 4
     5be:	29 83       	std	Y+1, r18	; 0x01
     5c0:	3a 83       	std	Y+2, r19	; 0x02
     5c2:	9b 83       	std	Y+3, r25	; 0x03
     5c4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GetMessage>
     5c8:	29 81       	ldd	r18, Y+1	; 0x01
     5ca:	3a 81       	ldd	r19, Y+2	; 0x02
     5cc:	9b 81       	ldd	r25, Y+3	; 0x03
     5ce:	88 23       	and	r24, r24
     5d0:	31 f0       	breq	.+12     	; 0x5de <DS_GetAsciiTemp+0x4e>
			*(AsciiTemp + i) = '-';
     5d2:	f9 01       	movw	r30, r18
     5d4:	e2 56       	subi	r30, 0x62	; 98
     5d6:	ff 4f       	sbci	r31, 0xFF	; 255
     5d8:	e0 82       	st	Z, r14
			i--;
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	31 09       	sbc	r19, r1
		}
		if (i==buf_size-1){ // Вставляем десятичную точку перед десятой долей градуса
     5de:	23 30       	cpi	r18, 0x03	; 3
     5e0:	31 05       	cpc	r19, r1
     5e2:	21 f4       	brne	.+8      	; 0x5ec <DS_GetAsciiTemp+0x5c>
			*(AsciiTemp+i)='.';
     5e4:	d0 92 a1 00 	sts	0x00A1, r13
			i--;
     5e8:	22 e0       	ldi	r18, 0x02	; 2
     5ea:	30 e0       	ldi	r19, 0x00	; 0
		}

		*(AsciiTemp + i) = int_temp%10 | 0x30;
     5ec:	f9 01       	movw	r30, r18
     5ee:	e2 56       	subi	r30, 0x62	; 98
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	8f 2d       	mov	r24, r15
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__udivmodhi4>
     5fa:	80 63       	ori	r24, 0x30	; 48
     5fc:	80 83       	st	Z, r24
		int_temp = int_temp/10;
     5fe:	f6 2e       	mov	r15, r22
     600:	97 2f       	mov	r25, r23
//
//	*(AsciiTemp + (i+3) ) = '\n';
//	*(AsciiTemp + (i+2) ) = 'C';
//	*(AsciiTemp + (i+1) ) = 0xB0;

	for(int i = buf_size; i >= 0; i--){
     602:	21 50       	subi	r18, 0x01	; 1
     604:	31 09       	sbc	r19, r1
     606:	37 ff       	sbrs	r19, 7
     608:	d9 cf       	rjmp	.-78     	; 0x5bc <DS_GetAsciiTemp+0x2c>
		}

		*(AsciiTemp + i) = int_temp%10 | 0x30;
		int_temp = int_temp/10;
	}
}
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	08 95       	ret

00000620 <DS_Start>:
//	LCD_WriteData(0x17); _delay_ms(500);
	return;
}

void DS_Start(){
	_FSM_State = 0;
     620:	10 92 a8 00 	sts	0x00A8, r1
     624:	08 95       	ret

00000626 <DS_Stop>:
	return;
}

void DS_Stop(){
	_FSM_State = 99;
     626:	83 e6       	ldi	r24, 0x63	; 99
     628:	80 93 a8 00 	sts	0x00A8, r24
     62c:	08 95       	ret

0000062e <DS_CheckCRC>:
	return;
}

///// Функция проверяет CRC переданный в аргументе. Возвращается ноль если CRC совпадает
uint8_t DS_CheckCRC(char *crc_to_check){
	crc8 = 0;
     62e:	10 92 9c 00 	sts	0x009C, r1
	for (int i = 7; i >= 0; i--){
     632:	27 e0       	ldi	r18, 0x07	; 7
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	fc 01       	movw	r30, r24
     638:	e2 0f       	add	r30, r18
     63a:	f3 1f       	adc	r31, r19
		crc8 = (char)pgm_read_byte( &(dscrc_table[ crc8 ^ crc_to_check[i] ]) );
     63c:	e0 81       	ld	r30, Z
     63e:	40 91 9c 00 	lds	r20, 0x009C
     642:	e4 27       	eor	r30, r20
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	e6 59       	subi	r30, 0x96	; 150
     648:	ff 4f       	sbci	r31, 0xFF	; 255
     64a:	e4 91       	lpm	r30, Z
     64c:	e0 93 9c 00 	sts	0x009C, r30
}

///// Функция проверяет CRC переданный в аргументе. Возвращается ноль если CRC совпадает
uint8_t DS_CheckCRC(char *crc_to_check){
	crc8 = 0;
	for (int i = 7; i >= 0; i--){
     650:	21 50       	subi	r18, 0x01	; 1
     652:	31 09       	sbc	r19, r1
     654:	80 f7       	brcc	.-32     	; 0x636 <DS_CheckCRC+0x8>
		crc8 = (char)pgm_read_byte( &(dscrc_table[ crc8 ^ crc_to_check[i] ]) );
	}
	return crc8;
}
     656:	8e 2f       	mov	r24, r30
     658:	08 95       	ret

0000065a <DS_ReadROM>:
		*(AsciiTemp + i) = int_temp%10 | 0x30;
		int_temp = int_temp/10;
	}
}

void DS_ReadROM(){
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	28 97       	sbiw	r28, 0x08	; 8
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	ce 01       	movw	r24, r28
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	7c 01       	movw	r14, r24
	char ds_rom[8];
	uint8_t crc_result = 0;

	do {
		DS_Reset();
     67c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DS_Reset>
		DS_WriteByte(READ_ROM);
     680:	83 e3       	ldi	r24, 0x33	; 51
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
     688:	8e 01       	movw	r16, r28
     68a:	07 5f       	subi	r16, 0xF7	; 247
     68c:	1f 4f       	sbci	r17, 0xFF	; 255
		for (int i = 7; i >= 0; i--){
			ds_rom[i] = DS_ReadByte();
     68e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DS_ReadByte>
     692:	f8 01       	movw	r30, r16
     694:	82 93       	st	-Z, r24
     696:	8f 01       	movw	r16, r30
	uint8_t crc_result = 0;

	do {
		DS_Reset();
		DS_WriteByte(READ_ROM);
		for (int i = 7; i >= 0; i--){
     698:	ee 15       	cp	r30, r14
     69a:	ff 05       	cpc	r31, r15
     69c:	c1 f7       	brne	.-16     	; 0x68e <DS_ReadROM+0x34>
			ds_rom[i] = DS_ReadByte();
		}
		crc_result = DS_CheckCRC(ds_rom);
     69e:	cf 01       	movw	r24, r30
     6a0:	0e 94 17 03 	call	0x62e	; 0x62e <DS_CheckCRC>
	} while (crc_result);
     6a4:	81 11       	cpse	r24, r1
     6a6:	ea cf       	rjmp	.-44     	; 0x67c <DS_ReadROM+0x22>
     6a8:	7e 01       	movw	r14, r28
     6aa:	f9 e0       	ldi	r31, 0x09	; 9
     6ac:	ef 0e       	add	r14, r31
     6ae:	f1 1c       	adc	r15, r1

	for (int i=0; i < 8; i++){
		UART_TxChar(ds_rom[i]);
     6b0:	f8 01       	movw	r30, r16
     6b2:	81 91       	ld	r24, Z+
     6b4:	8f 01       	movw	r16, r30
     6b6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <UART_TxChar>
			ds_rom[i] = DS_ReadByte();
		}
		crc_result = DS_CheckCRC(ds_rom);
	} while (crc_result);

	for (int i=0; i < 8; i++){
     6ba:	0e 15       	cp	r16, r14
     6bc:	1f 05       	cpc	r17, r15
     6be:	c1 f7       	brne	.-16     	; 0x6b0 <DS_ReadROM+0x56>
		UART_TxChar(ds_rom[i]);
	}

	SendBroadcastMessage(MSG_MENU_EXIT);
     6c0:	87 e0       	ldi	r24, 0x07	; 7
     6c2:	0e 94 66 06 	call	0xccc	; 0xccc <SendBroadcastMessage>
//	LCD_GotoXY(1,15);
//	LCD_WriteData(0x17); _delay_ms(500);
	return;
}
     6c6:	28 96       	adiw	r28, 0x08	; 8
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	08 95       	ret

000006e0 <DS_InitFSM>:
}

//////////////////// Конечный Автомат //////////////////////

void DS_InitFSM(){
	FSM_State = 0;
     6e0:	10 92 9d 00 	sts	0x009D, r1
     6e4:	08 95       	ret

000006e6 <DS_ProcessFSM>:
}

void DS_ProcessFSM(){
	if (GetBroadcastMessage(MSG_MENU_STARTED)){
     6e6:	86 e0       	ldi	r24, 0x06	; 6
     6e8:	0e 94 9a 06 	call	0xd34	; 0xd34 <GetBroadcastMessage>
     6ec:	88 23       	and	r24, r24
     6ee:	31 f0       	breq	.+12     	; 0x6fc <DS_ProcessFSM+0x16>
			_FSM_State = FSM_State;	// Сохраняем состояние автомата во временную переменную
     6f0:	80 91 9d 00 	lds	r24, 0x009D
     6f4:	80 93 a8 00 	sts	0x00A8, r24
			FSM_State = 0xFF;	// Вход в меню, работа КА приостанавливается
     6f8:	8f ef       	ldi	r24, 0xFF	; 255
     6fa:	07 c0       	rjmp	.+14     	; 0x70a <DS_ProcessFSM+0x24>
		}
		else if (GetBroadcastMessage(MSG_MENU_EXIT)){
     6fc:	87 e0       	ldi	r24, 0x07	; 7
     6fe:	0e 94 9a 06 	call	0xd34	; 0xd34 <GetBroadcastMessage>
     702:	88 23       	and	r24, r24
     704:	21 f0       	breq	.+8      	; 0x70e <DS_ProcessFSM+0x28>
			FSM_State = _FSM_State;	// Выход из меню. Возвращаемся к месту где остановились при входе в меню
     706:	80 91 a8 00 	lds	r24, 0x00A8
     70a:	80 93 9d 00 	sts	0x009D, r24
		}

	switch (FSM_State){
     70e:	80 91 9d 00 	lds	r24, 0x009D
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	51 f0       	breq	.+20     	; 0x72a <DS_ProcessFSM+0x44>
     716:	18 f0       	brcs	.+6      	; 0x71e <DS_ProcessFSM+0x38>
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	d1 f0       	breq	.+52     	; 0x750 <DS_ProcessFSM+0x6a>
     71c:	08 95       	ret
		case 0:
//			UART_TxString("DS0\n");
			FSM_State = 1;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 9d 00 	sts	0x009D, r24
			StartTimer(TIMER_TEMP_CONVERT);
     724:	86 e0       	ldi	r24, 0x06	; 6
     726:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <StartTimer>
			break;

		case 1:
//			UART_TxString("DS1\n");
			if (GetTimer(TIMER_TEMP_CONVERT) >= ds_refresh_period ){
     72a:	86 e0       	ldi	r24, 0x06	; 6
     72c:	0e 94 b0 06 	call	0xd60	; 0xd60 <GetTimer>
     730:	20 91 61 00 	lds	r18, 0x0061
     734:	30 91 62 00 	lds	r19, 0x0062
     738:	82 17       	cp	r24, r18
     73a:	93 07       	cpc	r25, r19
     73c:	e0 f0       	brcs	.+56     	; 0x776 <DS_ProcessFSM+0x90>
				DS_MeasureTemp();
     73e:	0e 94 82 02 	call	0x504	; 0x504 <DS_MeasureTemp>
				ResetTimer(TIMER_TEMP_CONVERT);
     742:	86 e0       	ldi	r24, 0x06	; 6
     744:	0e 94 b9 06 	call	0xd72	; 0xd72 <ResetTimer>
				FSM_State = 2;
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	80 93 9d 00 	sts	0x009D, r24
     74e:	08 95       	ret
			}
			break;

		case 2:
//			UART_TxString("DS2\n");
			if (GetTimer(TIMER_TEMP_CONVERT) >= ds_convert_period ){	// Через секунду гарантировано можно забирать значение при любой разрядности датчика
     750:	86 e0       	ldi	r24, 0x06	; 6
     752:	0e 94 b0 06 	call	0xd60	; 0xd60 <GetTimer>
     756:	20 91 60 00 	lds	r18, 0x0060
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	82 17       	cp	r24, r18
     75e:	93 07       	cpc	r25, r19
     760:	50 f0       	brcs	.+20     	; 0x776 <DS_ProcessFSM+0x90>
				DS_GetAsciiTemp();
     762:	0e 94 c8 02 	call	0x590	; 0x590 <DS_GetAsciiTemp>
				SendMessage(MSG_TEMP_CONVERT_COMPLETED);
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	0e 94 5f 06 	call	0xcbe	; 0xcbe <SendMessage>
				StopTimer(TIMER_TEMP_CONVERT);
     76c:	86 e0       	ldi	r24, 0x06	; 6
     76e:	0e 94 d3 06 	call	0xda6	; 0xda6 <StopTimer>
				FSM_State = 0;
     772:	10 92 9d 00 	sts	0x009D, r1
     776:	08 95       	ret

00000778 <LCD_WriteByte>:
}

void LCD_WriteByte(unsigned char b, unsigned char cd) {
#if defined(LCD_4bitMode)
// 4-битный режим
	LCD_DATA_DDR = (LCD_DATA_DDR | LCD_DataMask) ^ LCD_DataMask; // шина_данных на вход (ноли по маске не трогая остальные биты)
     778:	24 b3       	in	r18, 0x14	; 20
     77a:	90 91 65 00 	lds	r25, 0x0065
     77e:	90 95       	com	r25
     780:	92 23       	and	r25, r18
     782:	94 bb       	out	0x14, r25	; 20
	LCD_SIGNAL_DDR |= (1 << LCD_A0_PIN) | (1 << LCD_E_PIN) | (1 << LCD_RW_PIN); // пины A0, E, RW на вывод
     784:	94 b3       	in	r25, 0x14	; 20
     786:	97 60       	ori	r25, 0x07	; 7
     788:	94 bb       	out	0x14, r25	; 20

// Чтение флага занятости
	LCD_SIGNAL_PORT &= ~(1 << LCD_A0_PIN); //	A0 = 0
     78a:	a8 98       	cbi	0x15, 0	; 21
	LCD_SIGNAL_PORT |= (1 << LCD_RW_PIN); // 	RW = 1
     78c:	a9 9a       	sbi	0x15, 1	; 21
     78e:	22 e0       	ldi	r18, 0x02	; 2
     790:	2a 95       	dec	r18
     792:	f1 f7       	brne	.-4      	; 0x790 <LCD_WriteByte+0x18>
     794:	00 c0       	rjmp	.+0      	; 0x796 <LCD_WriteByte+0x1e>

	_delay_us(1); 			// 	>40ns
	LCD_SIGNAL_PORT |= (1 << LCD_E_PIN); 	//	E = 1
     796:	aa 9a       	sbi	0x15, 2	; 21
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	9a 95       	dec	r25
     79c:	f1 f7       	brne	.-4      	; 0x79a <LCD_WriteByte+0x22>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <LCD_WriteByte+0x28>
	_delay_us(1);			//	>230ns
	while ( ((LCD_DATA_PIN & LCD_DataMask) >> LCD_Pin7) );	//	Ждать сброса флага занятости на пине 7 LCD
     7a0:	90 91 65 00 	lds	r25, 0x0065
     7a4:	40 91 aa 00 	lds	r20, 0x00AA
     7a8:	23 b3       	in	r18, 0x13	; 19
     7aa:	29 23       	and	r18, r25
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	04 2e       	mov	r0, r20
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <LCD_WriteByte+0x3e>
     7b2:	35 95       	asr	r19
     7b4:	27 95       	ror	r18
     7b6:	0a 94       	dec	r0
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <LCD_WriteByte+0x3a>
     7ba:	23 2b       	or	r18, r19
     7bc:	a9 f7       	brne	.-22     	; 0x7a8 <LCD_WriteByte+0x30>

	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);	//	E = 0
     7be:	aa 98       	cbi	0x15, 2	; 21
	LCD_DATA_DDR = (LCD_DATA_DDR | LCD_DataMask);	// шина данных опять на вывод (единички по маске не трогая остальные биты)
     7c0:	94 b3       	in	r25, 0x14	; 20
     7c2:	20 91 65 00 	lds	r18, 0x0065
     7c6:	92 2b       	or	r25, r18
     7c8:	94 bb       	out	0x14, r25	; 20
	LCD_SIGNAL_PORT &= ~(1 << LCD_RW_PIN); //	RW = 0
     7ca:	a9 98       	cbi	0x15, 1	; 21

	if (cd == 1) {
     7cc:	61 30       	cpi	r22, 0x01	; 1
     7ce:	11 f4       	brne	.+4      	; 0x7d4 <LCD_WriteByte+0x5c>
		LCD_SIGNAL_PORT |= (1 << LCD_A0_PIN);
     7d0:	a8 9a       	sbi	0x15, 0	; 21
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <LCD_WriteByte+0x5e>
	}	// A0 = cd (1)
	else {
		LCD_SIGNAL_PORT &= ~(1 << LCD_A0_PIN);
     7d4:	a8 98       	cbi	0x15, 0	; 21
	}	// A0 = cd (0)

	uint8_t port_backup = LCD_DATA_PORT;
     7d6:	45 b3       	in	r20, 0x15	; 21
	uint8_t nibble = ( (b >> 4) << (LCD_Pin7 - 3)); // старший ниббл в нужной позиции
     7d8:	28 2f       	mov	r18, r24
     7da:	22 95       	swap	r18
     7dc:	2f 70       	andi	r18, 0x0F	; 15
     7de:	90 91 aa 00 	lds	r25, 0x00AA
     7e2:	93 50       	subi	r25, 0x03	; 3
     7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <LCD_WriteByte+0x70>
     7e6:	22 0f       	add	r18, r18
     7e8:	9a 95       	dec	r25
     7ea:	ea f7       	brpl	.-6      	; 0x7e6 <LCD_WriteByte+0x6e>
	port_backup = (port_backup & ~LCD_DataMask) | nibble; // обнуляем шину данных инвертированной маской, а потом вставляем ниббл
     7ec:	90 91 65 00 	lds	r25, 0x0065
     7f0:	90 95       	com	r25
     7f2:	94 23       	and	r25, r20
     7f4:	92 2b       	or	r25, r18
	LCD_DATA_PORT = port_backup;
     7f6:	95 bb       	out	0x15, r25	; 21

	LCD_SIGNAL_PORT |= (1 << LCD_E_PIN);
     7f8:	aa 9a       	sbi	0x15, 2	; 21
     7fa:	22 e0       	ldi	r18, 0x02	; 2
     7fc:	2a 95       	dec	r18
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <LCD_WriteByte+0x84>
     800:	00 c0       	rjmp	.+0      	; 0x802 <LCD_WriteByte+0x8a>
	_delay_us(1);
	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);
     802:	aa 98       	cbi	0x15, 2	; 21
     804:	28 e7       	ldi	r18, 0x78	; 120
     806:	2a 95       	dec	r18
     808:	f1 f7       	brne	.-4      	; 0x806 <LCD_WriteByte+0x8e>
	_delay_us(45);	// Строб

	nibble = ( (b & 0x0F) << (LCD_Pin7 - 3)); // младший ниббл в нужной позиции
	port_backup = (port_backup & ~LCD_DataMask) | nibble; // обнуляем шину данных инвертированной маской, а потом вставляем ниббл
     80a:	20 91 65 00 	lds	r18, 0x0065
     80e:	20 95       	com	r18
     810:	29 23       	and	r18, r25
	LCD_SIGNAL_PORT |= (1 << LCD_E_PIN);
	_delay_us(1);
	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);
	_delay_us(45);	// Строб

	nibble = ( (b & 0x0F) << (LCD_Pin7 - 3)); // младший ниббл в нужной позиции
     812:	8f 70       	andi	r24, 0x0F	; 15
     814:	30 91 aa 00 	lds	r19, 0x00AA
     818:	33 50       	subi	r19, 0x03	; 3
     81a:	03 2e       	mov	r0, r19
     81c:	01 c0       	rjmp	.+2      	; 0x820 <LCD_WriteByte+0xa8>
     81e:	88 0f       	add	r24, r24
     820:	0a 94       	dec	r0
     822:	ea f7       	brpl	.-6      	; 0x81e <LCD_WriteByte+0xa6>
	port_backup = (port_backup & ~LCD_DataMask) | nibble; // обнуляем шину данных инвертированной маской, а потом вставляем ниббл
     824:	28 2b       	or	r18, r24
	LCD_DATA_PORT = port_backup;
     826:	25 bb       	out	0x15, r18	; 21

	LCD_SIGNAL_PORT |= (1 << LCD_E_PIN);
     828:	aa 9a       	sbi	0x15, 2	; 21
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	8a 95       	dec	r24
     82e:	f1 f7       	brne	.-4      	; 0x82c <LCD_WriteByte+0xb4>
     830:	00 c0       	rjmp	.+0      	; 0x832 <LCD_WriteByte+0xba>
	_delay_us(1);
	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);
     832:	aa 98       	cbi	0x15, 2	; 21
     834:	98 e7       	ldi	r25, 0x78	; 120
     836:	9a 95       	dec	r25
     838:	f1 f7       	brne	.-4      	; 0x836 <LCD_WriteByte+0xbe>
     83a:	08 95       	ret

0000083c <LCD_WriteCmd>:
		LCD_WriteCmd(LCD_CLEAR_SCREEN);
#endif
}

void LCD_WriteCmd(unsigned char b) {
	LCD_WriteByte(b, 0);
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	0c 94 bc 03 	jmp	0x778	; 0x778 <LCD_WriteByte>

00000842 <LCD_WriteData>:
}

void LCD_WriteData(unsigned char b) {
	LCD_WriteByte(b, 1);
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	0c 94 bc 03 	jmp	0x778	; 0x778 <LCD_WriteByte>

00000848 <LCD_WriteString>:
	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);
	_delay_us(45);	// Строб
#endif
}

void LCD_WriteString(char *data) {
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
	while (*data) {
     84e:	88 81       	ld	r24, Y
     850:	88 23       	and	r24, r24
     852:	89 f0       	breq	.+34     	; 0x876 <LCD_WriteString+0x2e>
		if (*data >= 0xd0){	// Проврка на кириллицу в кодировке UTF-8
     854:	80 3d       	cpi	r24, 0xD0	; 208
     856:	58 f0       	brcs	.+22     	; 0x86e <LCD_WriteString+0x26>
     858:	99 81       	ldd	r25, Y+1	; 0x01
     85a:	22 96       	adiw	r28, 0x02	; 2
			if (*data == 0xd1) {	// проверка промежутка "п-я". В UTF8 он оторван и начинается с 0xD180, что соответствует строчной букве "п"
     85c:	81 3d       	cpi	r24, 0xD1	; 209
     85e:	11 f4       	brne	.+4      	; 0x864 <LCD_WriteString+0x1c>
				data++;
				LCD_WriteData(*data + 0x70);
     860:	80 e7       	ldi	r24, 0x70	; 112
     862:	01 c0       	rjmp	.+2      	; 0x866 <LCD_WriteString+0x1e>
				data++;
			}
			else { // промежуток "А-Я" и "а-о"
				data++;
				LCD_WriteData(*data + 0x30);
     864:	80 e3       	ldi	r24, 0x30	; 48
     866:	89 0f       	add	r24, r25
     868:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteData>
     86c:	f0 cf       	rjmp	.-32     	; 0x84e <LCD_WriteString+0x6>
				data++;
			}
		}
		else { // для латиницы
			LCD_WriteData(*data);
     86e:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteData>
			data++;
     872:	21 96       	adiw	r28, 0x01	; 1
     874:	ec cf       	rjmp	.-40     	; 0x84e <LCD_WriteString+0x6>
		}
	}
}
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <LCD_WriteStringFlash>:

void LCD_WriteStringFlash(const unsigned char *data) {
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	fc 01       	movw	r30, r24
	while (pgm_read_byte(data)) {
     886:	24 91       	lpm	r18, Z
     888:	22 23       	and	r18, r18
     88a:	d1 f0       	breq	.+52     	; 0x8c0 <LCD_WriteStringFlash+0x44>
		if (pgm_read_byte(data) >= 0xd0) {	// Проврка на кириллицу в кодировке UTF-8
     88c:	24 91       	lpm	r18, Z
     88e:	ef 01       	movw	r28, r30
     890:	21 96       	adiw	r28, 0x01	; 1
     892:	20 3d       	cpi	r18, 0xD0	; 208
     894:	80 f0       	brcs	.+32     	; 0x8b6 <LCD_WriteStringFlash+0x3a>
			if (pgm_read_byte(data) == 0xd1){	// проверка промежутка "п-я". В UTF8 он оторван и начинается с 0xD180, что соответствует строчной букве "п"
     896:	24 91       	lpm	r18, Z
     898:	8f 01       	movw	r16, r30
     89a:	0e 5f       	subi	r16, 0xFE	; 254
     89c:	1f 4f       	sbci	r17, 0xFF	; 255
				data++;
				LCD_WriteData(pgm_read_byte(data) + 0x70);
     89e:	fe 01       	movw	r30, r28
}

void LCD_WriteStringFlash(const unsigned char *data) {
	while (pgm_read_byte(data)) {
		if (pgm_read_byte(data) >= 0xd0) {	// Проврка на кириллицу в кодировке UTF-8
			if (pgm_read_byte(data) == 0xd1){	// проверка промежутка "п-я". В UTF8 он оторван и начинается с 0xD180, что соответствует строчной букве "п"
     8a0:	21 3d       	cpi	r18, 0xD1	; 209
     8a2:	19 f4       	brne	.+6      	; 0x8aa <LCD_WriteStringFlash+0x2e>
				data++;
				LCD_WriteData(pgm_read_byte(data) + 0x70);
     8a4:	84 91       	lpm	r24, Z
     8a6:	80 59       	subi	r24, 0x90	; 144
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <LCD_WriteStringFlash+0x32>
				data++;
			}
			else {// промежуток "А-Я" и "а-о"
				data++;
				LCD_WriteData(pgm_read_byte(data) + 0x30);
     8aa:	84 91       	lpm	r24, Z
     8ac:	80 5d       	subi	r24, 0xD0	; 208
     8ae:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteData>
				data++;
     8b2:	f8 01       	movw	r30, r16
     8b4:	e8 cf       	rjmp	.-48     	; 0x886 <LCD_WriteStringFlash+0xa>
			}
		}
		else { // Для латиницы
			LCD_WriteData(pgm_read_byte(data));
     8b6:	84 91       	lpm	r24, Z
     8b8:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteData>
			data++;
     8bc:	fe 01       	movw	r30, r28
     8be:	e3 cf       	rjmp	.-58     	; 0x886 <LCD_WriteStringFlash+0xa>
		}
	}
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	08 95       	ret

000008ca <LCD_init>:
uint8_t FSM_Staate; // Переменная состояния КА
char AsciiTemp[10];

void LCD_init() {
/////Инициализация пина подсветки LCD/////////
	LCD_BACKLIGHT_DDR |= (1 << LCD_BACKLIGHT_PIN);
     8ca:	8f 9a       	sbi	0x11, 7	; 17
	LCD_BACKLIGHT_PORT &= ~(1 << LCD_BACKLIGHT_PIN); // Выключено при запуске по умолчанию
     8cc:	97 98       	cbi	0x12, 7	; 18

/////Вычисление пина №7 шины данных///////////
	uint8_t shifted_mask = LCD_DataMask;
     8ce:	20 91 65 00 	lds	r18, 0x0065
     8d2:	92 2f       	mov	r25, r18
	LCD_Pin7 = 3;
	while (shifted_mask != 0b00001111){
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	31 e0       	ldi	r19, 0x01	; 1
     8d8:	38 0f       	add	r19, r24
     8da:	9f 30       	cpi	r25, 0x0F	; 15
     8dc:	19 f0       	breq	.+6      	; 0x8e4 <LCD_init+0x1a>
		shifted_mask >>= 1;
     8de:	96 95       	lsr	r25
     8e0:	83 2f       	mov	r24, r19
     8e2:	f9 cf       	rjmp	.-14     	; 0x8d6 <LCD_init+0xc>
     8e4:	80 93 aa 00 	sts	0x00AA, r24
		LCD_Pin7++;
	}
//////////////////////////////////////////////
#if defined (LCD_4bitMode)
// 4-битный режим
	LCD_DATA_DDR = (LCD_DATA_DDR & ~LCD_DataMask) | LCD_DataMask; // PORTC-шина данных на вывод (единички в ddr)
     8e8:	84 b3       	in	r24, 0x14	; 20
     8ea:	82 2b       	or	r24, r18
     8ec:	84 bb       	out	0x14, r24	; 20
	LCD_SIGNAL_DDR |= (1 << LCD_A0_PIN) | (1 << LCD_E_PIN) | (1 << LCD_RW_PIN); // пины 0, 1, 2 порта A на вывод
     8ee:	84 b3       	in	r24, 0x14	; 20
     8f0:	87 60       	ori	r24, 0x07	; 7
     8f2:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f4:	2f ef       	ldi	r18, 0xFF	; 255
     8f6:	80 e7       	ldi	r24, 0x70	; 112
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	21 50       	subi	r18, 0x01	; 1
     8fc:	80 40       	sbci	r24, 0x00	; 0
     8fe:	90 40       	sbci	r25, 0x00	; 0
     900:	e1 f7       	brne	.-8      	; 0x8fa <LCD_init+0x30>
     902:	00 c0       	rjmp	.+0      	; 0x904 <LCD_init+0x3a>
     904:	00 00       	nop

	_delay_ms(100); 			// 	>20ms
//	init
	LCD_SIGNAL_PORT &= ~(1 << LCD_A0_PIN);  // A0 = 0
     906:	a8 98       	cbi	0x15, 0	; 21
	LCD_SIGNAL_PORT &= ~(1 << LCD_RW_PIN);  // RW = 0
     908:	a9 98       	cbi	0x15, 1	; 21
	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);	// E = 0
     90a:	aa 98       	cbi	0x15, 2	; 21

	LCD_DATA_PORT = 0x30;			 //Выдача байта на шину данных [1]
     90c:	80 e3       	ldi	r24, 0x30	; 48
     90e:	85 bb       	out	0x15, r24	; 21
	LCD_SIGNAL_PORT |= (1 << LCD_E_PIN);
     910:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     912:	22 e0       	ldi	r18, 0x02	; 2
     914:	2a 95       	dec	r18
     916:	f1 f7       	brne	.-4      	; 0x914 <LCD_init+0x4a>
     918:	00 c0       	rjmp	.+0      	; 0x91a <LCD_init+0x50>
	_delay_us(1);
	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);
     91a:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     91c:	8f e1       	ldi	r24, 0x1F	; 31
     91e:	9e e4       	ldi	r25, 0x4E	; 78
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	f1 f7       	brne	.-4      	; 0x920 <LCD_init+0x56>
     924:	00 c0       	rjmp	.+0      	; 0x926 <LCD_init+0x5c>
     926:	00 00       	nop
	_delay_ms(10);	// Строб

	LCD_DATA_PORT = 0x30;			 //Выдача байта на шину данных [2]
     928:	80 e3       	ldi	r24, 0x30	; 48
     92a:	85 bb       	out	0x15, r24	; 21
	LCD_SIGNAL_PORT |= (1 << LCD_E_PIN);
     92c:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	9a 95       	dec	r25
     932:	f1 f7       	brne	.-4      	; 0x930 <LCD_init+0x66>
     934:	00 c0       	rjmp	.+0      	; 0x936 <LCD_init+0x6c>
	_delay_us(1);
	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);
     936:	aa 98       	cbi	0x15, 2	; 21
     938:	8f e8       	ldi	r24, 0x8F	; 143
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	f1 f7       	brne	.-4      	; 0x93c <LCD_init+0x72>
     940:	00 c0       	rjmp	.+0      	; 0x942 <LCD_init+0x78>
     942:	00 00       	nop
	_delay_us(200);	// Строб

	LCD_DATA_PORT = 0x30;			 //Выдача байта на шину данных [3]
     944:	80 e3       	ldi	r24, 0x30	; 48
     946:	85 bb       	out	0x15, r24	; 21
	LCD_SIGNAL_PORT |= (1 << LCD_E_PIN);
     948:	aa 9a       	sbi	0x15, 2	; 21
     94a:	92 e0       	ldi	r25, 0x02	; 2
     94c:	9a 95       	dec	r25
     94e:	f1 f7       	brne	.-4      	; 0x94c <LCD_init+0x82>
     950:	00 c0       	rjmp	.+0      	; 0x952 <LCD_init+0x88>
	_delay_us(1);
	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);
     952:	aa 98       	cbi	0x15, 2	; 21
     954:	25 ed       	ldi	r18, 0xD5	; 213
     956:	2a 95       	dec	r18
     958:	f1 f7       	brne	.-4      	; 0x956 <LCD_init+0x8c>
     95a:	00 00       	nop
	_delay_us(80);	// Строб

	LCD_DATA_PORT = 0x20;			 //Выдача байта на шину данных [4]
     95c:	80 e2       	ldi	r24, 0x20	; 32
     95e:	85 bb       	out	0x15, r24	; 21
	LCD_SIGNAL_PORT |= (1 << LCD_E_PIN);
     960:	aa 9a       	sbi	0x15, 2	; 21
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	8a 95       	dec	r24
     966:	f1 f7       	brne	.-4      	; 0x964 <LCD_init+0x9a>
     968:	00 c0       	rjmp	.+0      	; 0x96a <LCD_init+0xa0>
	_delay_us(1);
	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);
     96a:	aa 98       	cbi	0x15, 2	; 21
     96c:	87 ec       	ldi	r24, 0xC7	; 199
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	f1 f7       	brne	.-4      	; 0x970 <LCD_init+0xa6>
     974:	00 c0       	rjmp	.+0      	; 0x976 <LCD_init+0xac>
     976:	00 00       	nop
	_delay_us(100);	// Строб

//	setup
	LCD_WriteCmd(0b00101010);	// Function Set (4bit, 1я страница)
     978:	8a e2       	ldi	r24, 0x2A	; 42
     97a:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
	LCD_WriteCmd(0b00001111);	// Disp On/Off Control (вкл[1]/выкл[0] экрана, режим курсора[11])
     97e:	8f e0       	ldi	r24, 0x0F	; 15
     980:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
	LCD_WriteCmd(0b00000110);	// Entry Mode Set (курсор влево/вправо | разрешение сдвига экрана)
     984:	86 e0       	ldi	r24, 0x06	; 6
     986:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
	LCD_WriteCmd(0b00000001);	// Clear Display
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>

//	debug
	LCD_WriteCmd(0b00000010);	// Return Home (курсор в начало)
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
	LCD_WriteStringFlash(PSTR("4-битный режим"));	// инлайн строчка берется из флеша
     996:	88 e9       	ldi	r24, 0x98	; 152
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_WriteStringFlash>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99e:	9f ef       	ldi	r25, 0xFF	; 255
     9a0:	24 e3       	ldi	r18, 0x34	; 52
     9a2:	8c e0       	ldi	r24, 0x0C	; 12
     9a4:	91 50       	subi	r25, 0x01	; 1
     9a6:	20 40       	sbci	r18, 0x00	; 0
     9a8:	80 40       	sbci	r24, 0x00	; 0
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <LCD_init+0xda>
     9ac:	00 c0       	rjmp	.+0      	; 0x9ae <LCD_init+0xe4>
     9ae:	00 00       	nop
	_delay_ms(500);
	LCD_WriteCmd(LCD_CLEAR_SCREEN);
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	0c 94 1e 04 	jmp	0x83c	; 0x83c <LCD_WriteCmd>

000009b6 <LCD_ReadCursor>:
			data++;
		}
	}
}

uint8_t LCD_ReadCursor(){
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
	uint8_t byte = 0, hNibble = 0, lNibble = 0;
	LCD_SIGNAL_PORT |= (1 << LCD_A0_PIN); //	A0 = 1
     9ba:	a8 9a       	sbi	0x15, 0	; 21
	LCD_SIGNAL_PORT |= (1 << LCD_RW_PIN); // 	RW = 1
     9bc:	a9 9a       	sbi	0x15, 1	; 21
	LCD_DATA_DDR = (LCD_DATA_DDR | LCD_DataMask); // шина_данных на выход (единицы по маске не трогая остальные биты)
     9be:	84 b3       	in	r24, 0x14	; 20
     9c0:	90 91 65 00 	lds	r25, 0x0065
     9c4:	89 2b       	or	r24, r25
     9c6:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	8a 95       	dec	r24
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <LCD_ReadCursor+0x14>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <LCD_ReadCursor+0x1a>
	_delay_us(1); 	// Время предустановки адреса >40ns

#if defined (LCD_4bitMode)
// 4-битный режим
	LCD_SIGNAL_PORT |= (1 << LCD_E_PIN);	// E = 1
     9d0:	aa 9a       	sbi	0x15, 2	; 21
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	8a 95       	dec	r24
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <LCD_ReadCursor+0x1e>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <LCD_ReadCursor+0x24>
	_delay_us(1);
	hNibble = ( (LCD_DATA_PIN & LCD_DataMask) >> (LCD_Pin7 - 3) );	// Записываем старший ниббл
     9da:	23 b3       	in	r18, 0x13	; 19
     9dc:	80 91 65 00 	lds	r24, 0x0065
     9e0:	28 23       	and	r18, r24
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	80 91 aa 00 	lds	r24, 0x00AA
     9e8:	83 50       	subi	r24, 0x03	; 3
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <LCD_ReadCursor+0x3a>
     9ec:	35 95       	asr	r19
     9ee:	27 95       	ror	r18
     9f0:	8a 95       	dec	r24
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <LCD_ReadCursor+0x36>
	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);	// E = 0
     9f4:	aa 98       	cbi	0x15, 2	; 21
     9f6:	88 e7       	ldi	r24, 0x78	; 120
     9f8:	8a 95       	dec	r24
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <LCD_ReadCursor+0x42>
	_delay_us(45);	// Строб

	LCD_SIGNAL_PORT |= (1 << LCD_E_PIN);	// E = 1
     9fc:	aa 9a       	sbi	0x15, 2	; 21
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	8a 95       	dec	r24
     a02:	f1 f7       	brne	.-4      	; 0xa00 <LCD_ReadCursor+0x4a>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <LCD_ReadCursor+0x50>
	_delay_us(1);
	lNibble = ( (LCD_DATA_PIN & LCD_DataMask) >> (LCD_Pin7 - 3) );	// Записываем младший ниббл
     a06:	c3 b3       	in	r28, 0x13	; 19
     a08:	80 91 65 00 	lds	r24, 0x0065
     a0c:	c8 23       	and	r28, r24
     a0e:	d0 e0       	ldi	r29, 0x00	; 0
     a10:	80 91 aa 00 	lds	r24, 0x00AA
     a14:	83 50       	subi	r24, 0x03	; 3
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <LCD_ReadCursor+0x66>
     a18:	d5 95       	asr	r29
     a1a:	c7 95       	ror	r28
     a1c:	8a 95       	dec	r24
     a1e:	e2 f7       	brpl	.-8      	; 0xa18 <LCD_ReadCursor+0x62>
	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);	// E = 0
     a20:	aa 98       	cbi	0x15, 2	; 21
     a22:	88 e7       	ldi	r24, 0x78	; 120
     a24:	8a 95       	dec	r24
     a26:	f1 f7       	brne	.-4      	; 0xa24 <LCD_ReadCursor+0x6e>
	_delay_us(45);	// Строб

	byte = ( (hNibble << 4) | lNibble); // Укладываем нибблы в байт, сначала старший, затем младший
     a28:	d2 2f       	mov	r29, r18
     a2a:	d2 95       	swap	r29
     a2c:	d0 7f       	andi	r29, 0xF0	; 240
     a2e:	dc 2b       	or	r29, r28

	UART_TxChar((unsigned char)hNibble);
     a30:	82 2f       	mov	r24, r18
     a32:	0e 94 fd 08 	call	0x11fa	; 0x11fa <UART_TxChar>
	UART_TxChar((unsigned char)lNibble);
     a36:	8c 2f       	mov	r24, r28
     a38:	0e 94 fd 08 	call	0x11fa	; 0x11fa <UART_TxChar>
	UART_TxChar((unsigned char)byte);
     a3c:	8d 2f       	mov	r24, r29
     a3e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <UART_TxChar>
	LCD_SIGNAL_PORT &= ~(1 << LCD_E_PIN);	// E = 0
	_delay_us(45);	// Строб
#endif

	return byte;
}
     a42:	8d 2f       	mov	r24, r29
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <LCD_GotoXY>:

void LCD_GotoXY(unsigned char stroka, unsigned char simvol) {

	unsigned char result = 0;

	if (!stroka)
     a4a:	81 11       	cpse	r24, r1
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <LCD_GotoXY+0x8>
		result = simvol + 0x80; // 0я строка
     a4e:	80 e8       	ldi	r24, 0x80	; 128
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <LCD_GotoXY+0xa>
	else
		result = simvol + 0xC0; // 1я строка
     a52:	80 ec       	ldi	r24, 0xC0	; 192
     a54:	86 0f       	add	r24, r22

	LCD_WriteCmd(result);
     a56:	0c 94 1e 04 	jmp	0x83c	; 0x83c <LCD_WriteCmd>

00000a5a <LCD_MakeSymbol>:
}

void LCD_MakeSymbol(unsigned char addr, unsigned char * a0) {
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	c8 2f       	mov	r28, r24
     a64:	8b 01       	movw	r16, r22
	if (!addr)
     a66:	81 11       	cpse	r24, r1
     a68:	03 c0       	rjmp	.+6      	; 0xa70 <LCD_MakeSymbol+0x16>
	LCD_WriteCmd(addr + 0x40);
     a6a:	80 e4       	ldi	r24, 0x40	; 64
     a6c:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
	LCD_WriteCmd(addr * 0x08 + 0x40);	// Выбираем адрес символа в CGRAM
     a70:	8c 2f       	mov	r24, r28
     a72:	88 0f       	add	r24, r24
     a74:	88 0f       	add	r24, r24
     a76:	88 0f       	add	r24, r24
     a78:	80 5c       	subi	r24, 0xC0	; 192
     a7a:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
     a7e:	e8 01       	movw	r28, r16

	for (int i = 0; i < 8; i++) {
     a80:	00 e0       	ldi	r16, 0x00	; 0
     a82:	10 e0       	ldi	r17, 0x00	; 0
		LCD_WriteData(a0[i]);
     a84:	89 91       	ld	r24, Y+
     a86:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteData>
void LCD_MakeSymbol(unsigned char addr, unsigned char * a0) {
	if (!addr)
	LCD_WriteCmd(addr + 0x40);
	LCD_WriteCmd(addr * 0x08 + 0x40);	// Выбираем адрес символа в CGRAM

	for (int i = 0; i < 8; i++) {
     a8a:	0f 5f       	subi	r16, 0xFF	; 255
     a8c:	1f 4f       	sbci	r17, 0xFF	; 255
     a8e:	08 30       	cpi	r16, 0x08	; 8
     a90:	11 05       	cpc	r17, r1
     a92:	c1 f7       	brne	.-16     	; 0xa84 <LCD_MakeSymbol+0x2a>
		LCD_WriteData(a0[i]);
	}
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <LCD_ShowTemp>:

void LCD_ShowTemp(){
	LCD_WriteCmd(0x01);
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
	LCD_WriteStringFlash(PSTR("Темп=     "));
     aa4:	89 e8       	ldi	r24, 0x89	; 137
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_WriteStringFlash>
	LCD_WriteData(0xB0);
     aac:	80 eb       	ldi	r24, 0xB0	; 176
     aae:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteData>
	LCD_WriteStringFlash(PSTR("C"));
     ab2:	87 e8       	ldi	r24, 0x87	; 135
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_WriteStringFlash>
	if (!stroka)
		result = simvol + 0x80; // 0я строка
	else
		result = simvol + 0xC0; // 1я строка

	LCD_WriteCmd(result);
     aba:	85 e8       	ldi	r24, 0x85	; 133
     abc:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
	LCD_WriteStringFlash(PSTR("Темп=     "));
	LCD_WriteData(0xB0);
	LCD_WriteStringFlash(PSTR("C"));

	LCD_GotoXY(0,5);
	LCD_WriteString(AsciiTemp);
     ac0:	8e e9       	ldi	r24, 0x9E	; 158
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0c 94 24 04 	jmp	0x848	; 0x848 <LCD_WriteString>

00000ac8 <LCD_InitFSM>:
}

void LCD_InitFSM(){
	FSM_Staate = 0;
     ac8:	10 92 a9 00 	sts	0x00A9, r1
	StartTimer(TIMER_LCD_BACKLIGHT_TIMEOUT);
     acc:	87 e0       	ldi	r24, 0x07	; 7
     ace:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <StartTimer>

00000ad2 <LCD_ProcessFSM>:
}

void LCD_ProcessFSM(){
	if (GetBroadcastMessage(MSG_MENU_EXIT)){
     ad2:	87 e0       	ldi	r24, 0x07	; 7
     ad4:	0e 94 9a 06 	call	0xd34	; 0xd34 <GetBroadcastMessage>
     ad8:	88 23       	and	r24, r24
     ada:	89 f0       	breq	.+34     	; 0xafe <LCD_ProcessFSM+0x2c>
		FSM_Staate = 0;
     adc:	10 92 a9 00 	sts	0x00A9, r1
	if (!stroka)
		result = simvol + 0x80; // 0я строка
	else
		result = simvol + 0xC0; // 1я строка

	LCD_WriteCmd(result);
     ae0:	8f ec       	ldi	r24, 0xCF	; 207
     ae2:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>

void LCD_ProcessFSM(){
	if (GetBroadcastMessage(MSG_MENU_EXIT)){
		FSM_Staate = 0;
			LCD_GotoXY(1,15);
			LCD_WriteData(0x17); _delay_ms(200);
     ae6:	87 e1       	ldi	r24, 0x17	; 23
     ae8:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aec:	2f ef       	ldi	r18, 0xFF	; 255
     aee:	81 ee       	ldi	r24, 0xE1	; 225
     af0:	94 e0       	ldi	r25, 0x04	; 4
     af2:	21 50       	subi	r18, 0x01	; 1
     af4:	80 40       	sbci	r24, 0x00	; 0
     af6:	90 40       	sbci	r25, 0x00	; 0
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <LCD_ProcessFSM+0x20>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <LCD_ProcessFSM+0x2a>
     afc:	00 00       	nop
	}

	switch (FSM_Staate){
     afe:	80 91 a9 00 	lds	r24, 0x00A9
     b02:	8a 30       	cpi	r24, 0x0A	; 10
     b04:	09 f4       	brne	.+2      	; 0xb08 <LCD_ProcessFSM+0x36>
     b06:	4d c0       	rjmp	.+154    	; 0xba2 <LCD_ProcessFSM+0xd0>
     b08:	8b 30       	cpi	r24, 0x0B	; 11
     b0a:	09 f4       	brne	.+2      	; 0xb0e <LCD_ProcessFSM+0x3c>
     b0c:	6a c0       	rjmp	.+212    	; 0xbe2 <LCD_ProcessFSM+0x110>
     b0e:	81 11       	cpse	r24, r1
     b10:	bf c0       	rjmp	.+382    	; 0xc90 <LCD_ProcessFSM+0x1be>
		case 0:
			// Проверка таймаута подсветки. Выключаем таймер и подсветку, если таймаут.
			if (GetTimer(TIMER_LCD_BACKLIGHT_TIMEOUT) >= LCD_BacklightTimeout){
     b12:	87 e0       	ldi	r24, 0x07	; 7
     b14:	0e 94 b0 06 	call	0xd60	; 0xd60 <GetTimer>
     b18:	20 91 63 00 	lds	r18, 0x0063
     b1c:	30 91 64 00 	lds	r19, 0x0064
     b20:	82 17       	cp	r24, r18
     b22:	93 07       	cpc	r25, r19
     b24:	20 f0       	brcs	.+8      	; 0xb2e <LCD_ProcessFSM+0x5c>
				LCD_BACKLIGHT_PORT &= ~(1 << LCD_BACKLIGHT_PIN);
     b26:	97 98       	cbi	0x12, 7	; 18
				StopTimer(TIMER_LCD_BACKLIGHT_TIMEOUT);
     b28:	87 e0       	ldi	r24, 0x07	; 7
     b2a:	0e 94 d3 06 	call	0xda6	; 0xda6 <StopTimer>
			}

			if (GetMessage(MSG_TEMP_CONVERT_COMPLETED)){
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GetMessage>
     b34:	81 11       	cpse	r24, r1
				LCD_ShowTemp();
     b36:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD_ShowTemp>
			}
			if (GetMessage(MSG_KEYB_KEY_PRESSED)){
     b3a:	85 e0       	ldi	r24, 0x05	; 5
     b3c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GetMessage>
     b40:	88 23       	and	r24, r24
     b42:	09 f4       	brne	.+2      	; 0xb46 <LCD_ProcessFSM+0x74>
     b44:	ac c0       	rjmp	.+344    	; 0xc9e <LCD_ProcessFSM+0x1cc>
				// По нажатию клавиши заново стартует таймер подсветки и она включается на время LCD_BACKLIGHT_TIMEOUT (указано в настройках)
				StartTimer(TIMER_LCD_BACKLIGHT_TIMEOUT);
     b46:	87 e0       	ldi	r24, 0x07	; 7
     b48:	0e 94 c2 06 	call	0xd84	; 0xd84 <StartTimer>
				ResetTimer(TIMER_LCD_BACKLIGHT_TIMEOUT);
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	0e 94 b9 06 	call	0xd72	; 0xd72 <ResetTimer>
				LCD_BACKLIGHT_PORT |= (1 << LCD_BACKLIGHT_PIN);
     b52:	97 9a       	sbi	0x12, 7	; 18

				switch (Keyb_GetScancode()){
     b54:	0e 94 77 07 	call	0xeee	; 0xeee <Keyb_GetScancode>
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	fc 01       	movw	r30, r24
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	eb 30       	cpi	r30, 0x0B	; 11
     b60:	f1 05       	cpc	r31, r1
     b62:	08 f0       	brcs	.+2      	; 0xb66 <LCD_ProcessFSM+0x94>
     b64:	9c c0       	rjmp	.+312    	; 0xc9e <LCD_ProcessFSM+0x1cc>
     b66:	e6 5d       	subi	r30, 0xD6	; 214
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__tablejump2__>
					case KEY_1: LCD_ReadCursor(); break;
     b6e:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <LCD_ReadCursor>
					case KEY_2: LCD_WriteCmd(LCD_CURSOR_MOVE_LEFT); break;
     b72:	80 e1       	ldi	r24, 0x10	; 16
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <LCD_ProcessFSM+0xa6>
					case KEY_3: LCD_WriteCmd(LCD_CURSOR_MOVE_RIGHT); break;
     b76:	84 e1       	ldi	r24, 0x14	; 20
     b78:	0c 94 1e 04 	jmp	0x83c	; 0x83c <LCD_WriteCmd>
					case KEY_4: FSM_Staate=10; SendBroadcastMessage(MSG_MENU_STARTED); break;	// Вход в меню
     b7c:	8a e0       	ldi	r24, 0x0A	; 10
     b7e:	80 93 a9 00 	sts	0x00A9, r24
     b82:	86 e0       	ldi	r24, 0x06	; 6
     b84:	0c 94 66 06 	jmp	0xccc	; 0xccc <SendBroadcastMessage>
					case KEY_1_2: LCD_WriteData('5'); break;
     b88:	85 e3       	ldi	r24, 0x35	; 53
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <LCD_ProcessFSM+0xbc>
					case KEY_1_3: LCD_WriteData('6'); break;
     b8c:	86 e3       	ldi	r24, 0x36	; 54
     b8e:	0c 94 21 04 	jmp	0x842	; 0x842 <LCD_WriteData>
//					case KEY_1_4: FSM_Staate = 20; break;	// DEBUG
					case KEY_2_3: LCD_WriteData('8'); break;
     b92:	88 e3       	ldi	r24, 0x38	; 56
     b94:	fc cf       	rjmp	.-8      	; 0xb8e <LCD_ProcessFSM+0xbc>
					case KEY_2_4: LCD_WriteData('9'); break;
     b96:	89 e3       	ldi	r24, 0x39	; 57
     b98:	fa cf       	rjmp	.-12     	; 0xb8e <LCD_ProcessFSM+0xbc>
					case KEY_3_4: LCD_WriteData('A'); break;
     b9a:	81 e4       	ldi	r24, 0x41	; 65
     b9c:	f8 cf       	rjmp	.-16     	; 0xb8e <LCD_ProcessFSM+0xbc>
					case KEY_1_2_3: LCD_WriteData('B'); break;
     b9e:	82 e4       	ldi	r24, 0x42	; 66
     ba0:	f6 cf       	rjmp	.-20     	; 0xb8e <LCD_ProcessFSM+0xbc>
			}
			break;

		case 10:	// Входим в меню
			// Проверка таймаута подсветки. Выключаем ее, если таймаут.
			if (GetTimer(TIMER_LCD_BACKLIGHT_TIMEOUT) >= LCD_BacklightTimeout){
     ba2:	87 e0       	ldi	r24, 0x07	; 7
     ba4:	0e 94 b0 06 	call	0xd60	; 0xd60 <GetTimer>
     ba8:	20 91 63 00 	lds	r18, 0x0063
     bac:	30 91 64 00 	lds	r19, 0x0064
     bb0:	82 17       	cp	r24, r18
     bb2:	93 07       	cpc	r25, r19
     bb4:	20 f0       	brcs	.+8      	; 0xbbe <LCD_ProcessFSM+0xec>
				LCD_BACKLIGHT_PORT &= ~(1 << LCD_BACKLIGHT_PIN);
     bb6:	97 98       	cbi	0x12, 7	; 18
				StopTimer(TIMER_LCD_BACKLIGHT_TIMEOUT);
     bb8:	87 e0       	ldi	r24, 0x07	; 7
     bba:	0e 94 d3 06 	call	0xda6	; 0xda6 <StopTimer>
			}

			LCD_WriteCmd(LCD_CLEAR_SCREEN);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
			LCD_WriteStringFlash(PSTR("MENU:"));
     bc4:	81 e8       	ldi	r24, 0x81	; 129
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_WriteStringFlash>
	if (!stroka)
		result = simvol + 0x80; // 0я строка
	else
		result = simvol + 0xC0; // 1я строка

	LCD_WriteCmd(result);
     bcc:	80 ec       	ldi	r24, 0xC0	; 192
     bce:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
			}

			LCD_WriteCmd(LCD_CLEAR_SCREEN);
			LCD_WriteStringFlash(PSTR("MENU:"));
			LCD_GotoXY(1,0);
			SET_MENU(x1);
     bd2:	8d e8       	ldi	r24, 0x8D	; 141
     bd4:	93 e0       	ldi	r25, 0x03	; 3
     bd6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <MenuChange>
			FSM_Staate = 11;
     bda:	8b e0       	ldi	r24, 0x0B	; 11
     bdc:	80 93 a9 00 	sts	0x00A9, r24
			break;
     be0:	08 95       	ret

		case 11:
			// Проверка таймаута подсветки. Выключаем ее, если таймаут.
			if (GetTimer(TIMER_LCD_BACKLIGHT_TIMEOUT) >= LCD_BacklightTimeout){
     be2:	87 e0       	ldi	r24, 0x07	; 7
     be4:	0e 94 b0 06 	call	0xd60	; 0xd60 <GetTimer>
     be8:	20 91 63 00 	lds	r18, 0x0063
     bec:	30 91 64 00 	lds	r19, 0x0064
     bf0:	82 17       	cp	r24, r18
     bf2:	93 07       	cpc	r25, r19
     bf4:	20 f0       	brcs	.+8      	; 0xbfe <LCD_ProcessFSM+0x12c>
				LCD_BACKLIGHT_PORT &= ~(1 << LCD_BACKLIGHT_PIN);
     bf6:	97 98       	cbi	0x12, 7	; 18
				StopTimer(TIMER_LCD_BACKLIGHT_TIMEOUT);
     bf8:	87 e0       	ldi	r24, 0x07	; 7
     bfa:	0e 94 d3 06 	call	0xda6	; 0xda6 <StopTimer>
			}

			if (GetMessage(MSG_KEYB_KEY_PRESSED)){
     bfe:	85 e0       	ldi	r24, 0x05	; 5
     c00:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GetMessage>
     c04:	88 23       	and	r24, r24
     c06:	09 f4       	brne	.+2      	; 0xc0a <LCD_ProcessFSM+0x138>
     c08:	4a c0       	rjmp	.+148    	; 0xc9e <LCD_ProcessFSM+0x1cc>
// По нажатию клавиши заново стартует таймер подсветки и она включается на время LCD_BACKLIGHT_TIMEOUT (указано в настройках)
				StartTimer(TIMER_LCD_BACKLIGHT_TIMEOUT);
     c0a:	87 e0       	ldi	r24, 0x07	; 7
     c0c:	0e 94 c2 06 	call	0xd84	; 0xd84 <StartTimer>
				ResetTimer(TIMER_LCD_BACKLIGHT_TIMEOUT);
     c10:	87 e0       	ldi	r24, 0x07	; 7
     c12:	0e 94 b9 06 	call	0xd72	; 0xd72 <ResetTimer>
				LCD_BACKLIGHT_PORT |= (1 << LCD_BACKLIGHT_PIN);
     c16:	97 9a       	sbi	0x12, 7	; 18

				LCD_WriteCmd(LCD_CLEAR_SCREEN);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
				LCD_WriteStringFlash(PSTR("MENU:"));
     c1e:	8b e7       	ldi	r24, 0x7B	; 123
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_WriteStringFlash>
	if (!stroka)
		result = simvol + 0x80; // 0я строка
	else
		result = simvol + 0xC0; // 1я строка

	LCD_WriteCmd(result);
     c26:	80 ec       	ldi	r24, 0xC0	; 192
     c28:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
				LCD_BACKLIGHT_PORT |= (1 << LCD_BACKLIGHT_PIN);

				LCD_WriteCmd(LCD_CLEAR_SCREEN);
				LCD_WriteStringFlash(PSTR("MENU:"));
				LCD_GotoXY(1,0);
				switch (Keyb_GetScancode()){
     c2c:	0e 94 77 07 	call	0xeee	; 0xeee <Keyb_GetScancode>
     c30:	83 30       	cpi	r24, 0x03	; 3
     c32:	b9 f0       	breq	.+46     	; 0xc62 <LCD_ProcessFSM+0x190>
     c34:	28 f4       	brcc	.+10     	; 0xc40 <LCD_ProcessFSM+0x16e>
     c36:	81 30       	cpi	r24, 0x01	; 1
     c38:	41 f0       	breq	.+16     	; 0xc4a <LCD_ProcessFSM+0x178>
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	61 f0       	breq	.+24     	; 0xc56 <LCD_ProcessFSM+0x184>
     c3e:	08 95       	ret
     c40:	84 30       	cpi	r24, 0x04	; 4
     c42:	a1 f0       	breq	.+40     	; 0xc6c <LCD_ProcessFSM+0x19a>
     c44:	87 30       	cpi	r24, 0x07	; 7
     c46:	d9 f0       	breq	.+54     	; 0xc7e <LCD_ProcessFSM+0x1ac>
     c48:	08 95       	ret
					case KEY_1: SET_MENU(PARENT); break;
     c4a:	e0 91 de 00 	lds	r30, 0x00DE
     c4e:	f0 91 df 00 	lds	r31, 0x00DF
     c52:	34 96       	adiw	r30, 0x04	; 4
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <LCD_ProcessFSM+0x1a4>
					case KEY_2: SET_MENU(PREVIOUS); break;
     c56:	e0 91 de 00 	lds	r30, 0x00DE
     c5a:	f0 91 df 00 	lds	r31, 0x00DF
     c5e:	32 96       	adiw	r30, 0x02	; 2
     c60:	0a c0       	rjmp	.+20     	; 0xc76 <LCD_ProcessFSM+0x1a4>
					case KEY_3: SET_MENU(NEXT); break;
     c62:	e0 91 de 00 	lds	r30, 0x00DE
     c66:	f0 91 df 00 	lds	r31, 0x00DF
     c6a:	05 c0       	rjmp	.+10     	; 0xc76 <LCD_ProcessFSM+0x1a4>
					case KEY_4: SET_MENU(SIBLING); break;
     c6c:	e0 91 de 00 	lds	r30, 0x00DE
     c70:	f0 91 df 00 	lds	r31, 0x00DF
     c74:	36 96       	adiw	r30, 0x06	; 6
     c76:	85 91       	lpm	r24, Z+
     c78:	94 91       	lpm	r25, Z
     c7a:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <MenuChange>
					case KEY_1_4: GO_MENU_FUNC(SELECTFUNC); break; // Если выбран пункт "EXIT", то восстанавливаем работу автомата
     c7e:	e0 91 de 00 	lds	r30, 0x00DE
     c82:	f0 91 df 00 	lds	r31, 0x00DF
     c86:	38 96       	adiw	r30, 0x08	; 8
     c88:	85 91       	lpm	r24, Z+
     c8a:	94 91       	lpm	r25, Z
     c8c:	0c 94 cf 08 	jmp	0x119e	; 0x119e <MenuFunc>
				}
			}
			break;
		default:
			LCD_WriteCmd(LCD_CLEAR_SCREEN);
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
			LCD_WriteStringFlash(PSTR("There was error!"));
     c96:	8a e6       	ldi	r24, 0x6A	; 106
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	0c 94 3e 04 	jmp	0x87c	; 0x87c <LCD_WriteStringFlash>
     c9e:	08 95       	ret

00000ca0 <InitMessages>:
#include "Messages.h"

uint8_t Messages[MAX_MESSAGES];
uint8_t BroadcastMessages[MAX_BROADCAST_MESSAGES];

void InitMessages(){
     ca0:	e5 eb       	ldi	r30, 0xB5	; 181
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
	for (uint8_t i = 0; i < MAX_MESSAGES; i++){
		Messages[i] = 0;
     ca4:	11 92       	st	Z+, r1

uint8_t Messages[MAX_MESSAGES];
uint8_t BroadcastMessages[MAX_BROADCAST_MESSAGES];

void InitMessages(){
	for (uint8_t i = 0; i < MAX_MESSAGES; i++){
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	ef 3b       	cpi	r30, 0xBF	; 191
     caa:	f8 07       	cpc	r31, r24
     cac:	d9 f7       	brne	.-10     	; 0xca4 <InitMessages+0x4>
     cae:	eb ea       	ldi	r30, 0xAB	; 171
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
		Messages[i] = 0;
	}
	for (uint8_t i = 0; i < MAX_BROADCAST_MESSAGES; i++){
		BroadcastMessages[i] = 0;
     cb2:	11 92       	st	Z+, r1

void InitMessages(){
	for (uint8_t i = 0; i < MAX_MESSAGES; i++){
		Messages[i] = 0;
	}
	for (uint8_t i = 0; i < MAX_BROADCAST_MESSAGES; i++){
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	e5 3b       	cpi	r30, 0xB5	; 181
     cb8:	f8 07       	cpc	r31, r24
     cba:	d9 f7       	brne	.-10     	; 0xcb2 <InitMessages+0x12>
		BroadcastMessages[i] = 0;
	}
}
     cbc:	08 95       	ret

00000cbe <SendMessage>:

void SendMessage(uint8_t Msg){
	Messages[Msg] = 1;
     cbe:	e8 2f       	mov	r30, r24
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	eb 54       	subi	r30, 0x4B	; 75
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	80 83       	st	Z, r24
     cca:	08 95       	ret

00000ccc <SendBroadcastMessage>:
}

void SendBroadcastMessage(uint8_t Msg){
	BroadcastMessages[Msg] = 1;
     ccc:	e8 2f       	mov	r30, r24
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	e5 55       	subi	r30, 0x55	; 85
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	80 83       	st	Z, r24
     cd8:	08 95       	ret

00000cda <ProcessMessages>:
}

void ProcessMessages(){
     cda:	e5 eb       	ldi	r30, 0xB5	; 181
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
	for (uint8_t i = 0; i < MAX_MESSAGES; i++){
		if (Messages[i] == 2) Messages[i] = 0;
		if (Messages[i] == 1) Messages[i] = 2;
     cde:	82 e0       	ldi	r24, 0x02	; 2
	BroadcastMessages[Msg] = 1;
}

void ProcessMessages(){
	for (uint8_t i = 0; i < MAX_MESSAGES; i++){
		if (Messages[i] == 2) Messages[i] = 0;
     ce0:	90 81       	ld	r25, Z
     ce2:	92 30       	cpi	r25, 0x02	; 2
     ce4:	09 f4       	brne	.+2      	; 0xce8 <ProcessMessages+0xe>
     ce6:	10 82       	st	Z, r1
		if (Messages[i] == 1) Messages[i] = 2;
     ce8:	90 81       	ld	r25, Z
     cea:	91 30       	cpi	r25, 0x01	; 1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <ProcessMessages+0x16>
     cee:	80 83       	st	Z, r24
     cf0:	31 96       	adiw	r30, 0x01	; 1
void SendBroadcastMessage(uint8_t Msg){
	BroadcastMessages[Msg] = 1;
}

void ProcessMessages(){
	for (uint8_t i = 0; i < MAX_MESSAGES; i++){
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	ef 3b       	cpi	r30, 0xBF	; 191
     cf6:	f9 07       	cpc	r31, r25
     cf8:	99 f7       	brne	.-26     	; 0xce0 <ProcessMessages+0x6>
     cfa:	eb ea       	ldi	r30, 0xAB	; 171
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
		if (Messages[i] == 2) Messages[i] = 0;
		if (Messages[i] == 1) Messages[i] = 2;
	}
	for (uint8_t i = 0; i < MAX_BROADCAST_MESSAGES; i++){
		if (BroadcastMessages[i] == 2) BroadcastMessages[i] = 0;
		if (BroadcastMessages[i] == 1) BroadcastMessages[i] = 2;
     cfe:	82 e0       	ldi	r24, 0x02	; 2
	for (uint8_t i = 0; i < MAX_MESSAGES; i++){
		if (Messages[i] == 2) Messages[i] = 0;
		if (Messages[i] == 1) Messages[i] = 2;
	}
	for (uint8_t i = 0; i < MAX_BROADCAST_MESSAGES; i++){
		if (BroadcastMessages[i] == 2) BroadcastMessages[i] = 0;
     d00:	90 81       	ld	r25, Z
     d02:	92 30       	cpi	r25, 0x02	; 2
     d04:	09 f4       	brne	.+2      	; 0xd08 <ProcessMessages+0x2e>
     d06:	10 82       	st	Z, r1
		if (BroadcastMessages[i] == 1) BroadcastMessages[i] = 2;
     d08:	90 81       	ld	r25, Z
     d0a:	91 30       	cpi	r25, 0x01	; 1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <ProcessMessages+0x36>
     d0e:	80 83       	st	Z, r24
     d10:	31 96       	adiw	r30, 0x01	; 1
void ProcessMessages(){
	for (uint8_t i = 0; i < MAX_MESSAGES; i++){
		if (Messages[i] == 2) Messages[i] = 0;
		if (Messages[i] == 1) Messages[i] = 2;
	}
	for (uint8_t i = 0; i < MAX_BROADCAST_MESSAGES; i++){
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	e5 3b       	cpi	r30, 0xB5	; 181
     d16:	f9 07       	cpc	r31, r25
     d18:	99 f7       	brne	.-26     	; 0xd00 <ProcessMessages+0x26>
		if (BroadcastMessages[i] == 2) BroadcastMessages[i] = 0;
		if (BroadcastMessages[i] == 1) BroadcastMessages[i] = 2;
	}
}
     d1a:	08 95       	ret

00000d1c <GetMessage>:

uint8_t GetMessage(uint8_t Msg){
	if (Messages[Msg] == 2) {
     d1c:	e8 2f       	mov	r30, r24
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	eb 54       	subi	r30, 0x4B	; 75
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	80 81       	ld	r24, Z
     d26:	82 30       	cpi	r24, 0x02	; 2
     d28:	19 f4       	brne	.+6      	; 0xd30 <GetMessage+0x14>
		Messages[Msg] = 0;
     d2a:	10 82       	st	Z, r1
		return 1;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	08 95       	ret
	}
	return 0;
     d30:	80 e0       	ldi	r24, 0x00	; 0
}
     d32:	08 95       	ret

00000d34 <GetBroadcastMessage>:

uint8_t GetBroadcastMessage(uint8_t Msg){
	if (BroadcastMessages[Msg] == 2){
     d34:	e8 2f       	mov	r30, r24
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	e5 55       	subi	r30, 0x55	; 85
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 81       	ld	r25, Z
     d40:	92 30       	cpi	r25, 0x02	; 2
     d42:	09 f0       	breq	.+2      	; 0xd46 <GetBroadcastMessage+0x12>
     d44:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	return 0;
}
     d46:	08 95       	ret

00000d48 <InitTimers>:
#include "Timers.h"

uint16_t Timers[MAX_TIMERS];
uint8_t TimersState[MAX_TIMERS];

void InitTimers(){
     d48:	ef eb       	ldi	r30, 0xBF	; 191
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	a3 ed       	ldi	r26, 0xD3	; 211
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
	for (uint8_t i=0; i < MAX_TIMERS; i++){
		Timers[i] = 0;
     d50:	11 92       	st	Z+, r1
     d52:	11 92       	st	Z+, r1
		TimersState[i] = 0;
     d54:	1d 92       	st	X+, r1

uint16_t Timers[MAX_TIMERS];
uint8_t TimersState[MAX_TIMERS];

void InitTimers(){
	for (uint8_t i=0; i < MAX_TIMERS; i++){
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	e3 3d       	cpi	r30, 0xD3	; 211
     d5a:	f8 07       	cpc	r31, r24
     d5c:	c9 f7       	brne	.-14     	; 0xd50 <InitTimers+0x8>
		Timers[i] = 0;
		TimersState[i] = 0;
	}
}
     d5e:	08 95       	ret

00000d60 <GetTimer>:

uint16_t GetTimer(uint8_t Timer){
	return Timers[Timer];
     d60:	e8 2f       	mov	r30, r24
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	ee 0f       	add	r30, r30
     d66:	ff 1f       	adc	r31, r31
     d68:	e1 54       	subi	r30, 0x41	; 65
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
}
     d6c:	80 81       	ld	r24, Z
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
     d70:	08 95       	ret

00000d72 <ResetTimer>:

void ResetTimer(uint8_t Timer){
	Timers[Timer] = 0;
     d72:	e8 2f       	mov	r30, r24
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	e1 54       	subi	r30, 0x41	; 65
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	11 82       	std	Z+1, r1	; 0x01
     d80:	10 82       	st	Z, r1
     d82:	08 95       	ret

00000d84 <StartTimer>:
}

void StartTimer(uint8_t Timer){
	if (TimersState[Timer] == TIMER_STOPPED){
     d84:	e8 2f       	mov	r30, r24
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	df 01       	movw	r26, r30
     d8a:	ad 52       	subi	r26, 0x2D	; 45
     d8c:	bf 4f       	sbci	r27, 0xFF	; 255
     d8e:	8c 91       	ld	r24, X
     d90:	81 11       	cpse	r24, r1
     d92:	08 c0       	rjmp	.+16     	; 0xda4 <StartTimer+0x20>
		Timers[Timer] = 0;
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	e1 54       	subi	r30, 0x41	; 65
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	11 82       	std	Z+1, r1	; 0x01
     d9e:	10 82       	st	Z, r1
		TimersState[Timer] = TIMER_RUNNING;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	8c 93       	st	X, r24
     da4:	08 95       	ret

00000da6 <StopTimer>:
	}
}

void StopTimer(uint8_t Timer){
	TimersState[Timer] = TIMER_STOPPED;
     da6:	e8 2f       	mov	r30, r24
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	ed 52       	subi	r30, 0x2D	; 45
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	10 82       	st	Z, r1
     db0:	08 95       	ret

00000db2 <PauseTimer>:
}

void PauseTimer(uint8_t Timer){
	if (TimersState[Timer] == TIMER_RUNNING){
     db2:	e8 2f       	mov	r30, r24
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	ed 52       	subi	r30, 0x2D	; 45
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	80 81       	ld	r24, Z
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	11 f4       	brne	.+4      	; 0xdc4 <PauseTimer+0x12>
		TimersState[Timer] = TIMER_PAUSED;
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	80 83       	st	Z, r24
     dc4:	08 95       	ret

00000dc6 <ResumeTimer>:
	}
}

void ResumeTimer(uint8_t Timer){
	if (TimersState[Timer] == TIMER_PAUSED){
     dc6:	e8 2f       	mov	r30, r24
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	ed 52       	subi	r30, 0x2D	; 45
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	80 81       	ld	r24, Z
     dd0:	82 30       	cpi	r24, 0x02	; 2
     dd2:	11 f4       	brne	.+4      	; 0xdd8 <ResumeTimer+0x12>
		TimersState[Timer] = TIMER_RUNNING;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 83       	st	Z, r24
     dd8:	08 95       	ret

00000dda <ProcessTimers>:
	}
}

void ProcessTimers(){
     dda:	a7 ed       	ldi	r26, 0xD7	; 215
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e7 ec       	ldi	r30, 0xC7	; 199
     de0:	f0 e0       	ldi	r31, 0x00	; 0
	for (uint8_t i = 4; i < MAX_TIMERS; i++){ // Начинаем с 4го таймера, так как таймеры "секунды-минуты-часы-дни" обновляются по условию
		if (TimersState[i] == TIMER_RUNNING){
     de2:	8d 91       	ld	r24, X+
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	29 f4       	brne	.+10     	; 0xdf2 <ProcessTimers+0x18>
			Timers[i]++;
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	80 83       	st	Z, r24
     df2:	32 96       	adiw	r30, 0x02	; 2
		TimersState[Timer] = TIMER_RUNNING;
	}
}

void ProcessTimers(){
	for (uint8_t i = 4; i < MAX_TIMERS; i++){ // Начинаем с 4го таймера, так как таймеры "секунды-минуты-часы-дни" обновляются по условию
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	ad 3d       	cpi	r26, 0xDD	; 221
     df8:	b8 07       	cpc	r27, r24
     dfa:	99 f7       	brne	.-26     	; 0xde2 <ProcessTimers+0x8>
		if (TimersState[i] == TIMER_RUNNING){
			Timers[i]++;
		}
	}

	if (GetTimer(TIMER_TICK) == sec)	{ Timers[TIMER_SEC]++; ResetTimer(TIMER_TICK); }
     dfc:	80 91 c7 00 	lds	r24, 0x00C7
     e00:	90 91 c8 00 	lds	r25, 0x00C8
     e04:	8a 3f       	cpi	r24, 0xFA	; 250
     e06:	91 05       	cpc	r25, r1
     e08:	69 f4       	brne	.+26     	; 0xe24 <ProcessTimers+0x4a>
     e0a:	80 91 bf 00 	lds	r24, 0x00BF
     e0e:	90 91 c0 00 	lds	r25, 0x00C0
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	90 93 c0 00 	sts	0x00C0, r25
     e18:	80 93 bf 00 	sts	0x00BF, r24
uint16_t GetTimer(uint8_t Timer){
	return Timers[Timer];
}

void ResetTimer(uint8_t Timer){
	Timers[Timer] = 0;
     e1c:	10 92 c8 00 	sts	0x00C8, r1
     e20:	10 92 c7 00 	sts	0x00C7, r1
			Timers[i]++;
		}
	}

	if (GetTimer(TIMER_TICK) == sec)	{ Timers[TIMER_SEC]++; ResetTimer(TIMER_TICK); }
	if (GetTimer(TIMER_SEC) == 60)		{ Timers[TIMER_MIN]++;  ResetTimer(TIMER_SEC); }
     e24:	80 91 bf 00 	lds	r24, 0x00BF
     e28:	90 91 c0 00 	lds	r25, 0x00C0
     e2c:	cc 97       	sbiw	r24, 0x3c	; 60
     e2e:	69 f4       	brne	.+26     	; 0xe4a <ProcessTimers+0x70>
     e30:	80 91 c1 00 	lds	r24, 0x00C1
     e34:	90 91 c2 00 	lds	r25, 0x00C2
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	90 93 c2 00 	sts	0x00C2, r25
     e3e:	80 93 c1 00 	sts	0x00C1, r24
uint16_t GetTimer(uint8_t Timer){
	return Timers[Timer];
}

void ResetTimer(uint8_t Timer){
	Timers[Timer] = 0;
     e42:	10 92 c0 00 	sts	0x00C0, r1
     e46:	10 92 bf 00 	sts	0x00BF, r1
		}
	}

	if (GetTimer(TIMER_TICK) == sec)	{ Timers[TIMER_SEC]++; ResetTimer(TIMER_TICK); }
	if (GetTimer(TIMER_SEC) == 60)		{ Timers[TIMER_MIN]++;  ResetTimer(TIMER_SEC); }
	if (GetTimer(TIMER_MIN) == 60)		{ Timers[TIMER_HOUR]++; ResetTimer(TIMER_MIN); }
     e4a:	80 91 c1 00 	lds	r24, 0x00C1
     e4e:	90 91 c2 00 	lds	r25, 0x00C2
     e52:	cc 97       	sbiw	r24, 0x3c	; 60
     e54:	69 f4       	brne	.+26     	; 0xe70 <ProcessTimers+0x96>
     e56:	80 91 c3 00 	lds	r24, 0x00C3
     e5a:	90 91 c4 00 	lds	r25, 0x00C4
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	90 93 c4 00 	sts	0x00C4, r25
     e64:	80 93 c3 00 	sts	0x00C3, r24
uint16_t GetTimer(uint8_t Timer){
	return Timers[Timer];
}

void ResetTimer(uint8_t Timer){
	Timers[Timer] = 0;
     e68:	10 92 c2 00 	sts	0x00C2, r1
     e6c:	10 92 c1 00 	sts	0x00C1, r1
	}

	if (GetTimer(TIMER_TICK) == sec)	{ Timers[TIMER_SEC]++; ResetTimer(TIMER_TICK); }
	if (GetTimer(TIMER_SEC) == 60)		{ Timers[TIMER_MIN]++;  ResetTimer(TIMER_SEC); }
	if (GetTimer(TIMER_MIN) == 60)		{ Timers[TIMER_HOUR]++; ResetTimer(TIMER_MIN); }
	if (GetTimer(TIMER_HOUR) == 24)		{ Timers[TIMER_DAY]++; ResetTimer(TIMER_HOUR); }
     e70:	80 91 c3 00 	lds	r24, 0x00C3
     e74:	90 91 c4 00 	lds	r25, 0x00C4
     e78:	48 97       	sbiw	r24, 0x18	; 24
     e7a:	69 f4       	brne	.+26     	; 0xe96 <ProcessTimers+0xbc>
     e7c:	80 91 c5 00 	lds	r24, 0x00C5
     e80:	90 91 c6 00 	lds	r25, 0x00C6
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	90 93 c6 00 	sts	0x00C6, r25
     e8a:	80 93 c5 00 	sts	0x00C5, r24
uint16_t GetTimer(uint8_t Timer){
	return Timers[Timer];
}

void ResetTimer(uint8_t Timer){
	Timers[Timer] = 0;
     e8e:	10 92 c4 00 	sts	0x00C4, r1
     e92:	10 92 c3 00 	sts	0x00C3, r1
	if (GetTimer(TIMER_TICK) == sec)	{ Timers[TIMER_SEC]++; ResetTimer(TIMER_TICK); }
	if (GetTimer(TIMER_SEC) == 60)		{ Timers[TIMER_MIN]++;  ResetTimer(TIMER_SEC); }
	if (GetTimer(TIMER_MIN) == 60)		{ Timers[TIMER_HOUR]++; ResetTimer(TIMER_MIN); }
	if (GetTimer(TIMER_HOUR) == 24)		{ Timers[TIMER_DAY]++; ResetTimer(TIMER_HOUR); }

	TCNT2 = (255 - 125);	// Начинаем отсчитывать заново 125 тиков
     e96:	82 e8       	ldi	r24, 0x82	; 130
     e98:	84 bd       	out	0x24, r24	; 36
     e9a:	08 95       	ret

00000e9c <Keyb_InitFSM>:
uint8_t _scancode = 0;	// предыдущее состояние кнопки
uint8_t scancode = 0;	// скан-код нажатой кнопки

// Инициализация клавиатуры
void Keyb_InitFSM(){
	DDRA &= ~(1 << PA3); DDRA &= ~(1 << PA4);	// Пины PA3 и PA4 на вход c подтяжкой
     e9c:	d3 98       	cbi	0x1a, 3	; 26
     e9e:	d4 98       	cbi	0x1a, 4	; 26
	PORTA |= (1 << PA4) | (1 << PA4);			// источник тока если посажено на землю (+5V)
     ea0:	dc 9a       	sbi	0x1b, 4	; 27

	DDRA |= (1 << PA5) | (1 << PA6);	// Пины PA5 и PA6 на выход
     ea2:	8a b3       	in	r24, 0x1a	; 26
     ea4:	80 66       	ori	r24, 0x60	; 96
     ea6:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA5) | (1 << PA6);	// Пины 5 и 6 высокие (пока что не-GND)
     ea8:	8b b3       	in	r24, 0x1b	; 27
     eaa:	80 66       	ori	r24, 0x60	; 96
     eac:	8b bb       	out	0x1b, r24	; 27

	StartTimer(TIMER_KEYB);	// Запускаем таймер, он понадобится для антидребезга и расчета задержек для повторов
     eae:	85 e0       	ldi	r24, 0x05	; 5
     eb0:	0e 94 c2 06 	call	0xd84	; 0xd84 <StartTimer>
	FSM_Statee = 0;
     eb4:	10 92 dd 00 	sts	0x00DD, r1
     eb8:	08 95       	ret

00000eba <Keyb_Scan>:
	uint8_t key_mask[2]= {0b11011111, 0b10111111};
	uint8_t scan_mask = 0b00011000;
	uint8_t pina, pina1, pina2;	// Промежуточные переменные для формирования скан-кода

	for (uint8_t i = 0; i < 2; i++){
		uint8_t bit = PORTA;
     eba:	8b b3       	in	r24, 0x1b	; 27
		bit = (bit & scan_mask) | key_mask[i];
		PORTA = bit;
     ebc:	8f ed       	ldi	r24, 0xDF	; 223
     ebe:	8b bb       	out	0x1b, r24	; 27
	...
		asm("nop"); asm("nop"); asm("nop"); asm("nop"); // задержка чтоб ножки успели выставить нужный уровень
		pina = ((PINA & 0b01111000) >> 3); // Вычленяем текущее состояние ножек клавиатуры
     ec8:	99 b3       	in	r25, 0x19	; 25
	uint8_t key_mask[2]= {0b11011111, 0b10111111};
	uint8_t scan_mask = 0b00011000;
	uint8_t pina, pina1, pina2;	// Промежуточные переменные для формирования скан-кода

	for (uint8_t i = 0; i < 2; i++){
		uint8_t bit = PORTA;
     eca:	8b b3       	in	r24, 0x1b	; 27
		bit = (bit & scan_mask) | key_mask[i];
		PORTA = bit;
     ecc:	8f eb       	ldi	r24, 0xBF	; 191
     ece:	8b bb       	out	0x1b, r24	; 27
	...
		asm("nop"); asm("nop"); asm("nop"); asm("nop"); // задержка чтоб ножки успели выставить нужный уровень
		pina = ((PINA & 0b01111000) >> 3); // Вычленяем текущее состояние ножек клавиатуры
     ed8:	89 b3       	in	r24, 0x19	; 25
     eda:	98 77       	andi	r25, 0x78	; 120
		if (i == 0){pina1 = pina;}	// Первая часть скан-кода
		else {pina2 = pina;}		// Вторая часть скан-кода
	}
	scancode = (pina1 << 4) | pina2;	// Укладываем первую и вторую часть скан-кода по порядку
     edc:	99 0f       	add	r25, r25
	for (uint8_t i = 0; i < 2; i++){
		uint8_t bit = PORTA;
		bit = (bit & scan_mask) | key_mask[i];
		PORTA = bit;
		asm("nop"); asm("nop"); asm("nop"); asm("nop"); // задержка чтоб ножки успели выставить нужный уровень
		pina = ((PINA & 0b01111000) >> 3); // Вычленяем текущее состояние ножек клавиатуры
     ede:	88 77       	andi	r24, 0x78	; 120
     ee0:	86 95       	lsr	r24
     ee2:	86 95       	lsr	r24
     ee4:	86 95       	lsr	r24
		if (i == 0){pina1 = pina;}	// Первая часть скан-кода
		else {pina2 = pina;}		// Вторая часть скан-кода
	}
	scancode = (pina1 << 4) | pina2;	// Укладываем первую и вторую часть скан-кода по порядку
     ee6:	89 2b       	or	r24, r25
     ee8:	80 93 9a 00 	sts	0x009A, r24
	return scancode;
}
     eec:	08 95       	ret

00000eee <Keyb_GetScancode>:

uint8_t Keyb_GetScancode(){	// Возвращает код нажатой клавиши и 0xFF если ничего не нажато
     eee:	e0 91 9a 00 	lds	r30, 0x009A
     ef2:	e4 58       	subi	r30, 0x84	; 132
     ef4:	e4 33       	cpi	r30, 0x34	; 52
     ef6:	28 f4       	brcc	.+10     	; 0xf02 <Keyb_GetScancode+0x14>
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	ea 59       	subi	r30, 0x9A	; 154
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	80 81       	ld	r24, Z
     f00:	08 95       	ret
	switch (scancode){		// Список комбинаций вычислен брутфорсом :)
     f02:	8f ef       	ldi	r24, 0xFF	; 255
	case 0xA6: return KEY_2_4; break;
	case 0x87: return KEY_3_4; break;
	case 0x84: return KEY_1_2_3; break;
	}
	return 0xFF;
}
     f04:	08 95       	ret

00000f06 <Keyb_ProcessFSM>:

void Keyb_ProcessFSM(){
	switch (FSM_Statee){
     f06:	80 91 dd 00 	lds	r24, 0x00DD
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	21 f1       	breq	.+72     	; 0xf56 <Keyb_ProcessFSM+0x50>
     f0e:	28 f4       	brcc	.+10     	; 0xf1a <Keyb_ProcessFSM+0x14>
     f10:	88 23       	and	r24, r24
     f12:	49 f0       	breq	.+18     	; 0xf26 <Keyb_ProcessFSM+0x20>
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	a9 f0       	breq	.+42     	; 0xf42 <Keyb_ProcessFSM+0x3c>
     f18:	08 95       	ret
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	61 f1       	breq	.+88     	; 0xf76 <Keyb_ProcessFSM+0x70>
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	09 f4       	brne	.+2      	; 0xf24 <Keyb_ProcessFSM+0x1e>
     f22:	42 c0       	rjmp	.+132    	; 0xfa8 <Keyb_ProcessFSM+0xa2>
     f24:	08 95       	ret
		case 0:
//			UART_TxString("KB0\n");
			Keyb_Scan();
     f26:	0e 94 5d 07 	call	0xeba	; 0xeba <Keyb_Scan>
			if(scancode != 0xB7){	// Вроде как есть нажатие! Обнуляем таймер антидребезга!
     f2a:	80 91 9a 00 	lds	r24, 0x009A
     f2e:	87 3b       	cpi	r24, 0xB7	; 183
     f30:	09 f4       	brne	.+2      	; 0xf34 <Keyb_ProcessFSM+0x2e>
     f32:	4d c0       	rjmp	.+154    	; 0xfce <Keyb_ProcessFSM+0xc8>
				_scancode = scancode;
     f34:	80 93 9b 00 	sts	0x009B, r24
				ResetTimer(TIMER_KEYB);
     f38:	85 e0       	ldi	r24, 0x05	; 5
     f3a:	0e 94 b9 06 	call	0xd72	; 0xd72 <ResetTimer>
				FSM_Statee = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	07 c0       	rjmp	.+14     	; 0xf50 <Keyb_ProcessFSM+0x4a>
			}
			break;
		case 1:
//			UART_TxString("KB1\n");
			if (GetTimer(TIMER_KEYB) >= DEBOUNCE){ // задержка на дребезг
     f42:	85 e0       	ldi	r24, 0x05	; 5
     f44:	0e 94 b0 06 	call	0xd60	; 0xd60 <GetTimer>
     f48:	05 97       	sbiw	r24, 0x05	; 5
     f4a:	08 f4       	brcc	.+2      	; 0xf4e <Keyb_ProcessFSM+0x48>
     f4c:	40 c0       	rjmp	.+128    	; 0xfce <Keyb_ProcessFSM+0xc8>
				FSM_Statee = 2;
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	80 93 dd 00 	sts	0x00DD, r24
     f54:	08 95       	ret
			}
			break;
		case 2:
//			UART_TxString("KB2\n");
			Keyb_Scan();
     f56:	0e 94 5d 07 	call	0xeba	; 0xeba <Keyb_Scan>
			if (scancode == _scancode){ // Если нажатие всё еще есть, то идем дальше
     f5a:	90 91 9a 00 	lds	r25, 0x009A
     f5e:	80 91 9b 00 	lds	r24, 0x009B
     f62:	98 13       	cpse	r25, r24
     f64:	10 c0       	rjmp	.+32     	; 0xf86 <Keyb_ProcessFSM+0x80>
				SendMessage(MSG_KEYB_KEY_PRESSED);
     f66:	85 e0       	ldi	r24, 0x05	; 5
     f68:	0e 94 5f 06 	call	0xcbe	; 0xcbe <SendMessage>
				ResetTimer(TIMER_KEYB);
     f6c:	85 e0       	ldi	r24, 0x05	; 5
     f6e:	0e 94 b9 06 	call	0xd72	; 0xd72 <ResetTimer>
				FSM_Statee = 3;
     f72:	83 e0       	ldi	r24, 0x03	; 3
     f74:	ed cf       	rjmp	.-38     	; 0xf50 <Keyb_ProcessFSM+0x4a>
			}
			else FSM_Statee = 0; // Если нажатия нет, переходим к началу
			break;
		case 3:
//			UART_TxString("KB3\n");
			Keyb_Scan();
     f76:	0e 94 5d 07 	call	0xeba	; 0xeba <Keyb_Scan>
			if (scancode == _scancode){
     f7a:	90 91 9a 00 	lds	r25, 0x009A
     f7e:	80 91 9b 00 	lds	r24, 0x009B
     f82:	98 17       	cp	r25, r24
     f84:	19 f0       	breq	.+6      	; 0xf8c <Keyb_ProcessFSM+0x86>
			if (scancode == _scancode){ // Если нажатие всё еще есть, то идем дальше
				SendMessage(MSG_KEYB_KEY_PRESSED);
				ResetTimer(TIMER_KEYB);
				FSM_Statee = 3;
			}
			else FSM_Statee = 0; // Если нажатия нет, переходим к началу
     f86:	10 92 dd 00 	sts	0x00DD, r1
     f8a:	08 95       	ret
			break;
		case 3:
//			UART_TxString("KB3\n");
			Keyb_Scan();
			if (scancode == _scancode){
				if (GetTimer(TIMER_KEYB) >= FIRST_REPEAT_DELAY){
     f8c:	85 e0       	ldi	r24, 0x05	; 5
     f8e:	0e 94 b0 06 	call	0xd60	; 0xd60 <GetTimer>
     f92:	8d 37       	cpi	r24, 0x7D	; 125
     f94:	91 05       	cpc	r25, r1
     f96:	d8 f0       	brcs	.+54     	; 0xfce <Keyb_ProcessFSM+0xc8>
					ResetTimer(TIMER_KEYB);
     f98:	85 e0       	ldi	r24, 0x05	; 5
     f9a:	0e 94 b9 06 	call	0xd72	; 0xd72 <ResetTimer>
					SendMessage(MSG_KEYB_KEY_PRESSED);
     f9e:	85 e0       	ldi	r24, 0x05	; 5
     fa0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <SendMessage>
					FSM_Statee = 4;
     fa4:	84 e0       	ldi	r24, 0x04	; 4
     fa6:	d4 cf       	rjmp	.-88     	; 0xf50 <Keyb_ProcessFSM+0x4a>
			}
			else FSM_Statee = 0;
			break;
		case 4:
//			UART_TxString("KB4\n");
			Keyb_Scan();
     fa8:	0e 94 5d 07 	call	0xeba	; 0xeba <Keyb_Scan>
			if (scancode == _scancode){
     fac:	90 91 9a 00 	lds	r25, 0x009A
     fb0:	80 91 9b 00 	lds	r24, 0x009B
     fb4:	98 13       	cpse	r25, r24
     fb6:	e7 cf       	rjmp	.-50     	; 0xf86 <Keyb_ProcessFSM+0x80>
				if (GetTimer(TIMER_KEYB) >= REPEAT_DELAY){
     fb8:	85 e0       	ldi	r24, 0x05	; 5
     fba:	0e 94 b0 06 	call	0xd60	; 0xd60 <GetTimer>
     fbe:	49 97       	sbiw	r24, 0x19	; 25
     fc0:	30 f0       	brcs	.+12     	; 0xfce <Keyb_ProcessFSM+0xc8>
					ResetTimer(TIMER_KEYB);
     fc2:	85 e0       	ldi	r24, 0x05	; 5
     fc4:	0e 94 b9 06 	call	0xd72	; 0xd72 <ResetTimer>
					SendMessage(MSG_KEYB_KEY_PRESSED);
     fc8:	85 e0       	ldi	r24, 0x05	; 5
     fca:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <SendMessage>
     fce:	08 95       	ret

00000fd0 <__vector_4>:
#include "my_uart.h"
#include "DS18B20.h"
#include "LCD.h"
#include "menu.h"

ISR (TIMER2_OVF_vect){
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	11 24       	eor	r1, r1
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	4f 93       	push	r20
     fe0:	5f 93       	push	r21
     fe2:	6f 93       	push	r22
     fe4:	7f 93       	push	r23
     fe6:	8f 93       	push	r24
     fe8:	9f 93       	push	r25
     fea:	af 93       	push	r26
     fec:	bf 93       	push	r27
     fee:	ef 93       	push	r30
     ff0:	ff 93       	push	r31
	ProcessTimers();		// добавляем единичку ко всем виртуальным таймерам по переполнению и по условию (для секунд-минут итд)
     ff2:	0e 94 ed 06 	call	0xdda	; 0xdda <ProcessTimers>
}
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <main>:


int main(void) {
	UART_Init(MYUBRR);
    1018:	83 e3       	ldi	r24, 0x33	; 51
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <UART_Init>
	LCD_init();
    1020:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_init>
	InitTimers();
    1024:	0e 94 a4 06 	call	0xd48	; 0xd48 <InitTimers>
	InitMessages();
    1028:	0e 94 50 06 	call	0xca0	; 0xca0 <InitMessages>
	DS_InitFSM();
    102c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DS_InitFSM>
	LCD_InitFSM();
    1030:	0e 94 64 05 	call	0xac8	; 0xac8 <LCD_InitFSM>
	Keyb_InitFSM();
    1034:	0e 94 4e 07 	call	0xe9c	; 0xe9c <Keyb_InitFSM>
	SET_MENU_WRITE_FUNC(LCD_WriteStringFlash);
    1038:	8e e3       	ldi	r24, 0x3E	; 62
    103a:	94 e0       	ldi	r25, 0x04	; 4
    103c:	90 93 e1 00 	sts	0x00E1, r25
    1040:	80 93 e0 00 	sts	0x00E0, r24
//	LCD_WriteString("абвгдежзийклмноп                        рстуфхцчшщъыьэюя");
//	LCD_WriteStringFlash(PSTR("абвгдежзийклмноп                        рстуфхцчшщъыьэюя"));
//	UART_TxStringFlash(PSTR("абвгдежзийклмнопрстуфхцчшщъыьэюя"));

// Инициализация аппаратного таймера
	TCCR2 = (1 << CS22) | (1 << CS21) | (0 << CS20);	// Prescaler 256, один тик длится 0.032мс при частоте камня 8МГц
    1044:	86 e0       	ldi	r24, 0x06	; 6
    1046:	85 bd       	out	0x25, r24	; 37
	TCNT2 = (255 - 125);	// Обнуляем счетчик. Начинаем тикать 125 раз.
    1048:	82 e8       	ldi	r24, 0x82	; 130
    104a:	84 bd       	out	0x24, r24	; 36
							// За 125 тиков до переполнения пройдет 4мс. Одна секунда длится 250 переполнений.
	TIMSK = 1 << TOIE2;		// Запуск прерывания по переполнению таймера
    104c:	80 e4       	ldi	r24, 0x40	; 64
    104e:	89 bf       	out	0x39, r24	; 57

	asm("sei");	// Разрешаем прерывания
    1050:	78 94       	sei

	while (1) {
		LCD_ProcessFSM();
    1052:	0e 94 69 05 	call	0xad2	; 0xad2 <LCD_ProcessFSM>
		DS_ProcessFSM();
    1056:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DS_ProcessFSM>
		Keyb_ProcessFSM();
    105a:	0e 94 83 07 	call	0xf06	; 0xf06 <Keyb_ProcessFSM>
		ProcessMessages();
    105e:	0e 94 6d 06 	call	0xcda	; 0xcda <ProcessMessages>
    1062:	f7 cf       	rjmp	.-18     	; 0x1052 <main+0x3a>

00001064 <ds_9bit>:
	((FuncPtr)Function)();
}


void ds_9bit(){
	DS_Reset();
    1064:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DS_Reset>
	DS_WriteByte(SKIP_ROM);
    1068:	8c ec       	ldi	r24, 0xCC	; 204
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(WRITE_SCRATCHPAD);
    1070:	8e e4       	ldi	r24, 0x4E	; 78
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(0x00);			// Th - байт
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(0x00);			// Tl - байт
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(0b00011111);	// Config - байт
    1088:	8f e1       	ldi	r24, 0x1F	; 31
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	ds_convert_period = 24;		// 9bit=24, 10bit=47, 11bit=94, 12bit=188
    1090:	88 e1       	ldi	r24, 0x18	; 24
    1092:	80 93 60 00 	sts	0x0060, r24
	SendBroadcastMessage(MSG_MENU_EXIT);
    1096:	87 e0       	ldi	r24, 0x07	; 7
    1098:	0c 94 66 06 	jmp	0xccc	; 0xccc <SendBroadcastMessage>

0000109c <ds_10bit>:
//	LCD_WriteData(0x17); _delay_ms(200);
	return;
}

void ds_10bit(){
	DS_Reset();
    109c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DS_Reset>
	DS_WriteByte(SKIP_ROM);
    10a0:	8c ec       	ldi	r24, 0xCC	; 204
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(WRITE_SCRATCHPAD);
    10a8:	8e e4       	ldi	r24, 0x4E	; 78
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(0x00); // Th - байт
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(0x00); // Tl - байт
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(0b00111111); // Config - байт
    10c0:	8f e3       	ldi	r24, 0x3F	; 63
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	ds_convert_period = 47;		// 9bit=24, 10bit=47, 11bit=94, 12bit=188
    10c8:	8f e2       	ldi	r24, 0x2F	; 47
    10ca:	80 93 60 00 	sts	0x0060, r24
	SendBroadcastMessage(MSG_MENU_EXIT);
    10ce:	87 e0       	ldi	r24, 0x07	; 7
    10d0:	0c 94 66 06 	jmp	0xccc	; 0xccc <SendBroadcastMessage>

000010d4 <ds_11bit>:
//	LCD_WriteData(0x17); _delay_ms(200);
	return;
}

void ds_11bit(){
	DS_Reset();
    10d4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DS_Reset>
	DS_WriteByte(SKIP_ROM);
    10d8:	8c ec       	ldi	r24, 0xCC	; 204
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(WRITE_SCRATCHPAD);
    10e0:	8e e4       	ldi	r24, 0x4E	; 78
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(0x00);			// Th - байт
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(0x00);			// Tl - байт
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(0b01011111);	// Config - байт
    10f8:	8f e5       	ldi	r24, 0x5F	; 95
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	ds_convert_period = 94;		// 9bit=24, 10bit=47, 11bit=94, 12bit=188
    1100:	8e e5       	ldi	r24, 0x5E	; 94
    1102:	80 93 60 00 	sts	0x0060, r24
	SendBroadcastMessage(MSG_MENU_EXIT);
    1106:	87 e0       	ldi	r24, 0x07	; 7
    1108:	0c 94 66 06 	jmp	0xccc	; 0xccc <SendBroadcastMessage>

0000110c <ds_12bit>:
//	LCD_WriteData(0x17); _delay_ms(200);
	return;
}

void ds_12bit(){
	DS_Reset();
    110c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DS_Reset>
	DS_WriteByte(SKIP_ROM);
    1110:	8c ec       	ldi	r24, 0xCC	; 204
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(WRITE_SCRATCHPAD);
    1118:	8e e4       	ldi	r24, 0x4E	; 78
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(0x00);			// Th - байт
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(0x00);			// Tl - байт
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	DS_WriteByte(0b01111111);	// Config - байт
    1130:	8f e7       	ldi	r24, 0x7F	; 127
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>
	ds_convert_period = 0xBC;	// 9bit = 0x18(24 ticks), 10bit = 0x2F(47 ticks), 11bit = 0x5E(94 ticks), 12bit = 0xBC(188 ticks), 1tick = 4ms
    1138:	8c eb       	ldi	r24, 0xBC	; 188
    113a:	80 93 60 00 	sts	0x0060, r24
	SendBroadcastMessage(MSG_MENU_EXIT);
    113e:	87 e0       	ldi	r24, 0x07	; 7
    1140:	0c 94 66 06 	jmp	0xccc	; 0xccc <SendBroadcastMessage>

00001144 <ds_1sec>:
//	LCD_WriteData(0x17); _delay_ms(200);
	return;
}

void ds_1sec(){
	ds_refresh_period = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	90 93 62 00 	sts	0x0062, r25
    114c:	80 93 61 00 	sts	0x0061, r24
	SendBroadcastMessage(MSG_MENU_EXIT);
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	0c 94 66 06 	jmp	0xccc	; 0xccc <SendBroadcastMessage>

00001156 <ds_5sec>:
//	LCD_WriteData(0x17); _delay_ms(200);
	return;
}

void ds_5sec(){
	ds_refresh_period = 10*sec;
    1156:	84 ec       	ldi	r24, 0xC4	; 196
    1158:	99 e0       	ldi	r25, 0x09	; 9
    115a:	90 93 62 00 	sts	0x0062, r25
    115e:	80 93 61 00 	sts	0x0061, r24
	SendBroadcastMessage(MSG_MENU_EXIT);
    1162:	87 e0       	ldi	r24, 0x07	; 7
    1164:	0c 94 66 06 	jmp	0xccc	; 0xccc <SendBroadcastMessage>

00001168 <menu_exit>:
//	LCD_WriteData(0x17); _delay_ms(200);
	return;
}

void menu_exit(){
	SendBroadcastMessage(MSG_MENU_EXIT);
    1168:	87 e0       	ldi	r24, 0x07	; 7
    116a:	0c 94 66 06 	jmp	0xccc	; 0xccc <SendBroadcastMessage>

0000116e <cursor1>:
	return;
}

void cursor1(){
// Курсора нет, ничего не мигает
	LCD_WriteCmd(LCD_CURSOR_NOCURSOR);
    116e:	8c e0       	ldi	r24, 0x0C	; 12
    1170:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
	SendBroadcastMessage(MSG_MENU_EXIT);
    1174:	87 e0       	ldi	r24, 0x07	; 7
    1176:	0c 94 66 06 	jmp	0xccc	; 0xccc <SendBroadcastMessage>

0000117a <cursor2>:
	return;
}

void cursor2(){
// Курсора нет, мигает весь символ
	LCD_WriteCmd(LCD_CURSOR_BLOCKCURSOR);
    117a:	8d e0       	ldi	r24, 0x0D	; 13
    117c:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
	SendBroadcastMessage(MSG_MENU_EXIT);
    1180:	87 e0       	ldi	r24, 0x07	; 7
    1182:	0c 94 66 06 	jmp	0xccc	; 0xccc <SendBroadcastMessage>

00001186 <cursor3>:
	return;
}

void cursor3(){
// Курсор в виде черты и не мигает
	LCD_WriteCmd(LCD_CURSOR_LINE_NOBLINK);
    1186:	8e e0       	ldi	r24, 0x0E	; 14
    1188:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
	SendBroadcastMessage(MSG_MENU_EXIT);
    118c:	87 e0       	ldi	r24, 0x07	; 7
    118e:	0c 94 66 06 	jmp	0xccc	; 0xccc <SendBroadcastMessage>

00001192 <cursor4>:
	return;
}

void cursor4(){
	// Курсор в виде черты и мигает
	LCD_WriteCmd(LCD_CURSOR_LINE_BLINK);
    1192:	8f e0       	ldi	r24, 0x0F	; 15
    1194:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_WriteCmd>
	SendBroadcastMessage(MSG_MENU_EXIT);
    1198:	87 e0       	ldi	r24, 0x07	; 7
    119a:	0c 94 66 06 	jmp	0xccc	; 0xccc <SendBroadcastMessage>

0000119e <MenuFunc>:
	GO_MENU_FUNC(ENTERFUNC);
}

void MenuFunc(FuncPtr* Function)
{
	if ((void*)Function == (void*)NULL_FUNC)
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	11 f0       	breq	.+4      	; 0x11a6 <MenuFunc+0x8>
	  return;
	((FuncPtr)Function)();
    11a2:	fc 01       	movw	r30, r24
    11a4:	09 94       	ijmp
    11a6:	08 95       	ret

000011a8 <MenuChange>:


//Functions
void MenuChange(Menu_Item* NewMenu)
{
	if ((void*)NewMenu == (void*)&NULL_ENTRY)
    11a8:	23 e0       	ldi	r18, 0x03	; 3
    11aa:	8a 3a       	cpi	r24, 0xAA	; 170
    11ac:	92 07       	cpc	r25, r18
    11ae:	99 f0       	breq	.+38     	; 0x11d6 <MenuChange+0x2e>
		return;

	CurrMenuItem = NewMenu;
    11b0:	90 93 df 00 	sts	0x00DF, r25
    11b4:	80 93 de 00 	sts	0x00DE, r24
		char Buffer[MENU_USE_SRAM_BUFFER];
		strcpy_P(Buffer, CurrMenuItem->Text);

		((WriteFuncPtr)WriteFunc)((const char*)Buffer);
	#else
		((WriteFuncPtr)WriteFunc)((const char*)CurrMenuItem->Text);
    11b8:	e0 91 e0 00 	lds	r30, 0x00E0
    11bc:	f0 91 e1 00 	lds	r31, 0x00E1
    11c0:	0c 96       	adiw	r24, 0x0c	; 12
    11c2:	09 95       	icall
	#endif

	GO_MENU_FUNC(ENTERFUNC);
    11c4:	e0 91 de 00 	lds	r30, 0x00DE
    11c8:	f0 91 df 00 	lds	r31, 0x00DF
    11cc:	3a 96       	adiw	r30, 0x0a	; 10
    11ce:	85 91       	lpm	r24, Z+
    11d0:	94 91       	lpm	r25, Z
    11d2:	0c 94 cf 08 	jmp	0x119e	; 0x119e <MenuFunc>
    11d6:	08 95       	ret

000011d8 <__vector_11>:
#include <avr/interrupt.h>
#include "my_uart.h"
#include <avr/pgmspace.h>

//	Прерывание USART прием байта завершен
ISR (USART_RXC_vect) {
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
//	char data = UDR;
//	UART_TxChar(data);

}
    11e2:	0f 90       	pop	r0
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	0f 90       	pop	r0
    11e8:	1f 90       	pop	r1
    11ea:	18 95       	reti

000011ec <UART_Init>:

void UART_Init(unsigned int ubrr) {

	/* Set baud rate */
	UBRRH = (unsigned char) (ubrr >> 8);
    11ec:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) ubrr;
    11ee:	89 b9       	out	0x09, r24	; 9

	/* Enable receiver and transmitter */
	UCSRB = 1 << RXEN | 1 << TXEN | 0 << RXCIE | 0 << TXCIE | 0 << UDRIE;
    11f0:	88 e1       	ldi	r24, 0x18	; 24
    11f2:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 1 stop bit, 8data */
	UCSRC = (1 << URSEL) | (0 << USBS) | (3 << UCSZ0);
    11f4:	86 e8       	ldi	r24, 0x86	; 134
    11f6:	80 bd       	out	0x20, r24	; 32
    11f8:	08 95       	ret

000011fa <UART_TxChar>:
}

void UART_TxChar(unsigned char data) {	// Передача из МК в провод

	/* Wait for empty transmit buffer */
	while (!( UCSRA & (1 << UDRE)))
    11fa:	5d 9b       	sbis	0x0b, 5	; 11
    11fc:	fe cf       	rjmp	.-4      	; 0x11fa <UART_TxChar>
		;

	/* Put data into buffer, sends the data */
	UDR = (unsigned int) data;
    11fe:	8c b9       	out	0x0c, r24	; 12
    1200:	08 95       	ret

00001202 <UART_TxString>:

}

void UART_TxString(unsigned char * data) {
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ec 01       	movw	r28, r24
	while (*data) {
    1208:	89 91       	ld	r24, Y+
    120a:	88 23       	and	r24, r24
    120c:	19 f0       	breq	.+6      	; 0x1214 <UART_TxString+0x12>
		UART_TxChar(*data);
    120e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <UART_TxChar>
    1212:	fa cf       	rjmp	.-12     	; 0x1208 <UART_TxString+0x6>
		data++;
	}
}
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	08 95       	ret

0000121a <UART_TxStringFlash>:

void UART_TxStringFlash(const unsigned char *data) {
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	ec 01       	movw	r28, r24
	while (pgm_read_byte(data)) {
    1224:	fe 01       	movw	r30, r28
    1226:	84 91       	lpm	r24, Z
    1228:	88 23       	and	r24, r24
    122a:	a1 f0       	breq	.+40     	; 0x1254 <UART_TxStringFlash+0x3a>
		if (pgm_read_byte(data) >= 0xd0) {
    122c:	fe 01       	movw	r30, r28
    122e:	84 91       	lpm	r24, Z
    1230:	8e 01       	movw	r16, r28
    1232:	0f 5f       	subi	r16, 0xFF	; 255
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
    1236:	80 3d       	cpi	r24, 0xD0	; 208
    1238:	38 f0       	brcs	.+14     	; 0x1248 <UART_TxStringFlash+0x2e>
			data++;
			UART_TxChar(pgm_read_byte(data) + 0x30);
    123a:	f8 01       	movw	r30, r16
    123c:	84 91       	lpm	r24, Z
    123e:	80 5d       	subi	r24, 0xD0	; 208
    1240:	0e 94 fd 08 	call	0x11fa	; 0x11fa <UART_TxChar>
			data++;
    1244:	22 96       	adiw	r28, 0x02	; 2
    1246:	ee cf       	rjmp	.-36     	; 0x1224 <UART_TxStringFlash+0xa>
		}
		else {
			UART_TxChar(pgm_read_byte(data));
    1248:	fe 01       	movw	r30, r28
    124a:	84 91       	lpm	r24, Z
    124c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <UART_TxChar>
			data++;
    1250:	e8 01       	movw	r28, r16
    1252:	e8 cf       	rjmp	.-48     	; 0x1224 <UART_TxStringFlash+0xa>
		}
	}
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	08 95       	ret

0000125e <docrc8>:
//	LCD_GotoXY(1,15);
//	LCD_WriteData(0x17); _delay_ms(500);
}

uint8_t docrc8(uint8_t x){
	crc8 = (char)pgm_read_byte( &(dscrc_table[crc8 ^ x]) );
    125e:	e0 91 9c 00 	lds	r30, 0x009C
    1262:	e8 27       	eor	r30, r24
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	e6 59       	subi	r30, 0x96	; 150
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	84 91       	lpm	r24, Z
    126c:	80 93 9c 00 	sts	0x009C, r24
	return crc8;
}
    1270:	08 95       	ret

00001272 <DS_SearchROM>:

uint8_t Next(){
	return DS_SearchROM();	// 1 - device found and ROM in buffer; 0 - device not found, end of search
}

uint8_t DS_SearchROM(){
    1272:	ff 92       	push	r15
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
	id_bit_number = 1;
	last_zero = 0;
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;
	crc8 = 0;
    127c:	10 92 9c 00 	sts	0x009C, r1

	if (!LastDeviceFlag){
    1280:	80 91 eb 00 	lds	r24, 0x00EB
    1284:	81 11       	cpse	r24, r1
    1286:	61 c0       	rjmp	.+194    	; 0x134a <DS_SearchROM+0xd8>
		if (!DS_Reset()){	// If devices are present
    1288:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DS_Reset>
    128c:	89 2b       	or	r24, r25
    128e:	09 f4       	brne	.+2      	; 0x1292 <DS_SearchROM+0x20>
    1290:	5c c0       	rjmp	.+184    	; 0x134a <DS_SearchROM+0xd8>
			LastDiscrepancy = 0;
			LastDeviceFlag = 0;
			LastFamilyDiscrepancy = 0;
			return 0;
		}
		DS_WriteByte(SEARCH_ROM);
    1292:	80 ef       	ldi	r24, 0xF0	; 240
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 37 02 	call	0x46e	; 0x46e <DS_WriteByte>

	// Init for search
	id_bit_number = 1;
	last_zero = 0;
	rom_byte_number = 0;
	rom_byte_mask = 1;
    129a:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t search_direction;

	// Init for search
	id_bit_number = 1;
	last_zero = 0;
	rom_byte_number = 0;
    129c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t rom_byte_mask;
	uint8_t search_direction;

	// Init for search
	id_bit_number = 1;
	last_zero = 0;
    129e:	f1 2c       	mov	r15, r1
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask;
	uint8_t search_direction;

	// Init for search
	id_bit_number = 1;
    12a0:	c1 e0       	ldi	r28, 0x01	; 1
			return 0;
		}
		DS_WriteByte(SEARCH_ROM);

		do {
			id_bit = DS_ReadBit();
    12a2:	0e 94 57 02 	call	0x4ae	; 0x4ae <DS_ReadBit>
    12a6:	08 2f       	mov	r16, r24
			cmp_id_bit = DS_ReadBit();
    12a8:	0e 94 57 02 	call	0x4ae	; 0x4ae <DS_ReadBit>

			// Check for no-device on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1))
    12ac:	01 30       	cpi	r16, 0x01	; 1
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <DS_SearchROM+0x44>
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	c1 f4       	brne	.+48     	; 0x12e4 <DS_SearchROM+0x72>
    12b4:	3c c0       	rjmp	.+120    	; 0x132e <DS_SearchROM+0xbc>
    12b6:	21 2f       	mov	r18, r17
    12b8:	30 e0       	ldi	r19, 0x00	; 0
				break;
			else {
				// 10 or 01
				if (id_bit != cmp_id_bit)
    12ba:	08 13       	cpse	r16, r24
    12bc:	1d c0       	rjmp	.+58     	; 0x12f8 <DS_SearchROM+0x86>
					search_direction = id_bit;
				// 00 - discrepancy
				else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < LastDiscrepancy)
    12be:	80 91 ec 00 	lds	r24, 0x00EC
    12c2:	c8 17       	cp	r28, r24
    12c4:	38 f4       	brcc	.+14     	; 0x12d4 <DS_SearchROM+0x62>
						search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    12c6:	f9 01       	movw	r30, r18
    12c8:	ee 51       	subi	r30, 0x1E	; 30
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	80 81       	ld	r24, Z
    12ce:	8d 23       	and	r24, r29
    12d0:	49 f4       	brne	.+18     	; 0x12e4 <DS_SearchROM+0x72>
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DS_SearchROM+0x66>
					else
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == LastDiscrepancy);
    12d4:	c8 17       	cp	r28, r24
    12d6:	31 f0       	breq	.+12     	; 0x12e4 <DS_SearchROM+0x72>
    12d8:	00 e0       	ldi	r16, 0x00	; 0
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0){
						last_zero = id_bit_number;

						// Check last discrepancy in family
						if (last_zero < 9)
    12da:	c9 30       	cpi	r28, 0x09	; 9
    12dc:	60 f4       	brcc	.+24     	; 0x12f6 <DS_SearchROM+0x84>
							LastFamilyDiscrepancy = last_zero;
    12de:	c0 93 ea 00 	sts	0x00EA, r28
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <DS_SearchROM+0x84>
				// Здесь выбранный бит записывается в контейнер ROM по маске
				// там бегает единичка поочередно для каждого бита текущего байта
				// Если только единичка выйдет за пределы 8-байтной переменнной
				// значит байт найден и надо "объединичить" маску и перейти к следующему байту
				if (search_direction == 1)
					ROM_NO[rom_byte_number] |= rom_byte_mask;
    12e4:	e1 2f       	mov	r30, r17
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	ee 51       	subi	r30, 0x1E	; 30
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 81       	ld	r24, Z
    12ee:	8d 2b       	or	r24, r29
    12f0:	80 83       	st	Z, r24
    12f2:	01 e0       	ldi	r16, 0x01	; 1
    12f4:	09 c0       	rjmp	.+18     	; 0x1308 <DS_SearchROM+0x96>
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask;
	uint8_t search_direction;

	// Init for search
	id_bit_number = 1;
    12f6:	fc 2e       	mov	r15, r28
				// Если только единичка выйдет за пределы 8-байтной переменнной
				// значит байт найден и надо "объединичить" маску и перейти к следующему байту
				if (search_direction == 1)
					ROM_NO[rom_byte_number] |= rom_byte_mask;
				else
					ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    12f8:	f9 01       	movw	r30, r18
    12fa:	ee 51       	subi	r30, 0x1E	; 30
    12fc:	ff 4f       	sbci	r31, 0xFF	; 255
    12fe:	80 81       	ld	r24, Z
    1300:	9d 2f       	mov	r25, r29
    1302:	90 95       	com	r25
    1304:	89 23       	and	r24, r25
    1306:	80 83       	st	Z, r24

				DS_WriteBit(search_direction);	// Запись выбранного бита направления поиска
    1308:	80 2f       	mov	r24, r16
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 1d 02 	call	0x43a	; 0x43a <DS_WriteBit>
				id_bit_number++;
    1310:	cf 5f       	subi	r28, 0xFF	; 255
				rom_byte_mask <<= 1;
    1312:	dd 0f       	add	r29, r29

				// if mask is zero then go to next byte in ROM and reset mask
				if (rom_byte_mask == 0){
    1314:	49 f4       	brne	.+18     	; 0x1328 <DS_SearchROM+0xb6>
					docrc8(ROM_NO[rom_byte_number]); // Accumulate CRC
    1316:	e1 2f       	mov	r30, r17
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	ee 51       	subi	r30, 0x1E	; 30
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	80 81       	ld	r24, Z
    1320:	0e 94 2f 09 	call	0x125e	; 0x125e <docrc8>
					rom_byte_number++;
    1324:	1f 5f       	subi	r17, 0xFF	; 255
					rom_byte_mask = 1;
    1326:	d1 e0       	ldi	r29, 0x01	; 1
				}
			}
		} while (rom_byte_number < 8); // делать пока все 8 байт не будут прочитаны
    1328:	18 30       	cpi	r17, 0x08	; 8
    132a:	08 f4       	brcc	.+2      	; 0x132e <DS_SearchROM+0xbc>
    132c:	ba cf       	rjmp	.-140    	; 0x12a2 <DS_SearchROM+0x30>

		if (!((id_bit_number < 65) || (crc8 != 0))){ // check crc for found ROM
    132e:	c1 34       	cpi	r28, 0x41	; 65
    1330:	60 f0       	brcs	.+24     	; 0x134a <DS_SearchROM+0xd8>
    1332:	80 91 9c 00 	lds	r24, 0x009C
    1336:	81 11       	cpse	r24, r1
    1338:	08 c0       	rjmp	.+16     	; 0x134a <DS_SearchROM+0xd8>
			// search succesfull
			LastDiscrepancy = last_zero;
    133a:	f0 92 ec 00 	sts	0x00EC, r15

			// check for last device
			if (LastDiscrepancy == 0)
    133e:	f1 10       	cpse	r15, r1
    1340:	0c c0       	rjmp	.+24     	; 0x135a <DS_SearchROM+0xe8>
				LastDeviceFlag = 1;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	80 93 eb 00 	sts	0x00EB, r24
    1348:	08 c0       	rjmp	.+16     	; 0x135a <DS_SearchROM+0xe8>
			search_result = 1;
		}
	}
	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !ROM_NO[0]){
		LastDiscrepancy = 0;
    134a:	10 92 ec 00 	sts	0x00EC, r1
		LastDeviceFlag = 0;
    134e:	10 92 eb 00 	sts	0x00EB, r1
		LastFamilyDiscrepancy = 0;
    1352:	10 92 ea 00 	sts	0x00EA, r1
		search_result = 0;
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	05 c0       	rjmp	.+10     	; 0x1364 <DS_SearchROM+0xf2>
				LastDeviceFlag = 1;
			search_result = 1;
		}
	}
	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !ROM_NO[0]){
    135a:	80 91 e2 00 	lds	r24, 0x00E2
    135e:	88 23       	and	r24, r24
    1360:	a1 f3       	breq	.-24     	; 0x134a <DS_SearchROM+0xd8>
    1362:	81 e0       	ldi	r24, 0x01	; 1
		LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;	// 1 - device found and ROM in buffer; 0 - device not found, end of search
}
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	ff 90       	pop	r15
    136e:	08 95       	ret

00001370 <First>:
uint8_t LastDeviceFlag; // Done flag
uint8_t crc8;

uint8_t First(){
	// Reset Search State
	LastDiscrepancy = 0;
    1370:	10 92 ec 00 	sts	0x00EC, r1
	LastDeviceFlag = 0;
    1374:	10 92 eb 00 	sts	0x00EB, r1
	LastFamilyDiscrepancy = 0;
    1378:	10 92 ea 00 	sts	0x00EA, r1

	return DS_SearchROM();	// 1 - device found and ROM in buffer; 0 - device not found, end of search
    137c:	0c 94 39 09 	jmp	0x1272	; 0x1272 <DS_SearchROM>

00001380 <DS_SearchAllDevices>:
	}

	return search_result;	// 1 - device found and ROM in buffer; 0 - device not found, end of search
}

void DS_SearchAllDevices(){
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
	uint8_t result = First();
    1384:	0e 94 b8 09 	call	0x1370	; 0x1370 <First>
//	UART_TxChar(result);

	while (result){
    1388:	88 23       	and	r24, r24
    138a:	61 f0       	breq	.+24     	; 0x13a4 <DS_SearchAllDevices+0x24>
    138c:	c2 ee       	ldi	r28, 0xE2	; 226
    138e:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i=0;i<8; i++) {
			UART_TxChar(ROM_NO[i]);
    1390:	89 91       	ld	r24, Y+
    1392:	0e 94 fd 08 	call	0x11fa	; 0x11fa <UART_TxChar>
			result = First();
    1396:	0e 94 b8 09 	call	0x1370	; 0x1370 <First>
void DS_SearchAllDevices(){
	uint8_t result = First();
//	UART_TxChar(result);

	while (result){
		for (int i=0;i<8; i++) {
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	ca 3e       	cpi	r28, 0xEA	; 234
    139e:	d9 07       	cpc	r29, r25
    13a0:	b9 f7       	brne	.-18     	; 0x1390 <DS_SearchAllDevices+0x10>
    13a2:	f2 cf       	rjmp	.-28     	; 0x1388 <DS_SearchAllDevices+0x8>
		}
	}
//	SendBroadcastMessage(MSG_MENU_EXIT);
//	LCD_GotoXY(1,15);
//	LCD_WriteData(0x17); _delay_ms(500);
}
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <Next>:

	return DS_SearchROM();	// 1 - device found and ROM in buffer; 0 - device not found, end of search
}

uint8_t Next(){
	return DS_SearchROM();	// 1 - device found and ROM in buffer; 0 - device not found, end of search
    13aa:	0c 94 39 09 	jmp	0x1272	; 0x1272 <DS_SearchROM>

000013ae <__udivmodhi4>:
    13ae:	aa 1b       	sub	r26, r26
    13b0:	bb 1b       	sub	r27, r27
    13b2:	51 e1       	ldi	r21, 0x11	; 17
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <__udivmodhi4_ep>

000013b6 <__udivmodhi4_loop>:
    13b6:	aa 1f       	adc	r26, r26
    13b8:	bb 1f       	adc	r27, r27
    13ba:	a6 17       	cp	r26, r22
    13bc:	b7 07       	cpc	r27, r23
    13be:	10 f0       	brcs	.+4      	; 0x13c4 <__udivmodhi4_ep>
    13c0:	a6 1b       	sub	r26, r22
    13c2:	b7 0b       	sbc	r27, r23

000013c4 <__udivmodhi4_ep>:
    13c4:	88 1f       	adc	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	5a 95       	dec	r21
    13ca:	a9 f7       	brne	.-22     	; 0x13b6 <__udivmodhi4_loop>
    13cc:	80 95       	com	r24
    13ce:	90 95       	com	r25
    13d0:	bc 01       	movw	r22, r24
    13d2:	cd 01       	movw	r24, r26
    13d4:	08 95       	ret

000013d6 <__tablejump2__>:
    13d6:	ee 0f       	add	r30, r30
    13d8:	ff 1f       	adc	r31, r31

000013da <__tablejump__>:
    13da:	05 90       	lpm	r0, Z+
    13dc:	f4 91       	lpm	r31, Z
    13de:	e0 2d       	mov	r30, r0
    13e0:	09 94       	ijmp

000013e2 <_exit>:
    13e2:	f8 94       	cli

000013e4 <__stop_program>:
    13e4:	ff cf       	rjmp	.-2      	; 0x13e4 <__stop_program>
